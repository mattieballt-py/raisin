var Ka = Object.defineProperty;
var ts = (n) => {
  throw TypeError(n);
};
var Ya = (n, e, t) => e in n ? Ka(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => Ya(n, typeof e != "symbol" ? e + "" : e, t), Qn = (n, e, t) => e.has(n) || ts("Cannot " + t);
var o = (n, e, t) => (Qn(n, e, "read from private field"), t ? t.call(n) : e.get(n)), T = (n, e, t) => e.has(n) ? ts("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), y = (n, e, t, r) => (Qn(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), F = (n, e, t) => (Qn(n, e, "access private method"), t);
const dr = {
  version: "0.1.2"
};
async function Dr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function Xa(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const Qa = Symbol("Let zodToJsonSchema decide on which parser to use"), ns = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, ei = (n) => typeof n == "string" ? {
  ...ns,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...ns,
  basePath: ["#"],
  definitions: {},
  ...n
}, lr = (n) => "_def" in n ? n._def : n;
function ti(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const ni = (n) => {
  const e = ei(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      lr(s),
      {
        def: lr(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Ys(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function z(n, e, t, r, s) {
  n[e] = t, Ys(n, e, r, s);
}
var B;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((u) => typeof s[s[u]] != "number"), i = {};
    for (const u of a)
      i[u] = s[u];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(B || (B = {}));
var rs;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(rs || (rs = {}));
const k = B.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Fe = (n) => {
  switch (typeof n) {
    case "undefined":
      return k.undefined;
    case "string":
      return k.string;
    case "number":
      return Number.isNaN(n) ? k.nan : k.number;
    case "boolean":
      return k.boolean;
    case "function":
      return k.function;
    case "bigint":
      return k.bigint;
    case "symbol":
      return k.symbol;
    case "object":
      return Array.isArray(n) ? k.array : n === null ? k.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? k.promise : typeof Map < "u" && n instanceof Map ? k.map : typeof Set < "u" && n instanceof Set ? k.set : typeof Date < "u" && n instanceof Date ? k.date : k.object;
    default:
      return k.unknown;
  }
}, w = B.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class Me extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let u = r, p = 0;
          for (; p < i.path.length; ) {
            const d = i.path[p];
            p === i.path.length - 1 ? (u[d] = u[d] || { _errors: [] }, u[d]._errors.push(t(i))) : u[d] = u[d] || { _errors: [] }, u = u[d], p++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof Me))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, B.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
Me.create = (n) => new Me(n);
const pr = (n, e) => {
  let t;
  switch (n.code) {
    case w.invalid_type:
      n.received === k.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case w.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, B.jsonStringifyReplacer)}`;
      break;
    case w.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${B.joinValues(n.keys, ", ")}`;
      break;
    case w.invalid_union:
      t = "Invalid input";
      break;
    case w.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${B.joinValues(n.options)}`;
      break;
    case w.invalid_enum_value:
      t = `Invalid enum value. Expected ${B.joinValues(n.options)}, received '${n.received}'`;
      break;
    case w.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case w.invalid_return_type:
      t = "Invalid function return type";
      break;
    case w.invalid_date:
      t = "Invalid date";
      break;
    case w.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : B.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case w.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case w.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case w.custom:
      t = "Invalid input";
      break;
    case w.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case w.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case w.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, B.assertNever(n);
  }
  return { message: t };
};
let ri = pr;
function si() {
  return ri;
}
const ai = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let u = "";
  const p = r.filter((d) => !!d).slice().reverse();
  for (const d of p)
    u = d(i, { data: e, defaultError: u }).message;
  return {
    ...s,
    path: a,
    message: u
  };
};
function I(n, e) {
  const t = si(), r = ai({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === pr ? void 0 : pr
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class ie {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return D;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return ie.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return D;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const D = Object.freeze({
  status: "aborted"
}), Zt = (n) => ({ status: "dirty", value: n }), _e = (n) => ({ status: "valid", value: n }), ss = (n) => n.status === "aborted", as = (n) => n.status === "dirty", Mt = (n) => n.status === "valid", En = (n) => typeof Promise < "u" && n instanceof Promise;
var C;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(C || (C = {}));
class Ie {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const is = (n, e) => {
  if (Mt(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new Me(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function j(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, u) => {
    const { message: p } = n;
    return i.code === "invalid_enum_value" ? { message: p ?? u.defaultError } : typeof u.data > "u" ? { message: p ?? r ?? u.defaultError } : i.code !== "invalid_type" ? { message: u.defaultError } : { message: p ?? t ?? u.defaultError };
  }, description: s };
}
class U {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return Fe(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: Fe(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new ie(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: Fe(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (En(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return is(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return Mt(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => Mt(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (En(s) ? s : Promise.resolve(s));
    return is(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), u = () => a.addIssue({
        code: w.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((p) => p ? !0 : (u(), !1)) : i ? !0 : (u(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new dt({
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Pe.create(this, this._def);
  }
  nullable() {
    return lt.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Te.create(this);
  }
  promise() {
    return jn.create(this, this._def);
  }
  or(e) {
    return Rn.create([this, e], this._def);
  }
  and(e) {
    return Nn.create(this, e, this._def);
  }
  transform(e) {
    return new dt({
      ...j(this._def),
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new $n({
      ...j(this._def),
      innerType: this,
      defaultValue: t,
      typeName: S.ZodDefault
    });
  }
  brand() {
    return new ta({
      typeName: S.ZodBranded,
      type: this,
      ...j(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Fn({
      ...j(this._def),
      innerType: this,
      catchValue: t,
      typeName: S.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Mr.create(this, e);
  }
  readonly() {
    return Ln.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const ii = /^c[^\s-]{8,}$/i, oi = /^[0-9a-z]+$/, ui = /^[0-9A-HJKMNP-TV-Z]{26}$/i, ci = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, di = /^[a-z0-9_-]{21}$/i, li = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, pi = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, fi = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, hi = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let er;
const mi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, gi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, _i = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, yi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, vi = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, wi = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Xs = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", bi = new RegExp(`^${Xs}$`);
function Qs(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function xi(n) {
  return new RegExp(`^${Qs(n)}$`);
}
function Si(n) {
  let e = `${Xs}T${Qs(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function Ti(n, e) {
  return !!((e === "v4" || !e) && mi.test(n) || (e === "v6" || !e) && _i.test(n));
}
function Ii(n, e) {
  if (!li.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function ki(n, e) {
  return !!((e === "v4" || !e) && gi.test(n) || (e === "v6" || !e) && yi.test(n));
}
class De extends U {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== k.string) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: w.invalid_type,
        expected: k.string,
        received: a.parsedType
      }), D;
    }
    const r = new ie();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), I(s, {
          code: w.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), I(s, {
          code: w.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, u = e.data.length < a.value;
        (i || u) && (s = this._getOrReturnCtx(e, s), i ? I(s, {
          code: w.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : u && I(s, {
          code: w.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        fi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "email",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        er || (er = new RegExp(hi, "u")), er.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "emoji",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        ci.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "uuid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        di.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "nanoid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        ii.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "cuid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        oi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "cuid2",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        ui.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "ulid",
          code: w.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), I(s, {
            validation: "url",
            code: w.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "regex",
        code: w.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? Si(a).test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? bi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? xi(a).test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? pi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "duration",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? Ti(e.data, a.version) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "ip",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? Ii(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "jwt",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? ki(e.data, a.version) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "cidr",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? vi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "base64",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? wi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "base64url",
        code: w.invalid_string,
        message: a.message
      }), r.dirty()) : B.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: w.invalid_string,
      ...C.errToObj(r)
    });
  }
  _addCheck(e) {
    return new De({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...C.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...C.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...C.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...C.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...C.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...C.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...C.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...C.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...C.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...C.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...C.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...C.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...C.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...C.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...C.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...C.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...C.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...C.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...C.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, C.errToObj(e));
  }
  trim() {
    return new De({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new De({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new De({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
De.create = (n) => new De({
  checks: [],
  typeName: S.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...j(n)
});
function Ai(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class jt extends U {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== k.number) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: w.invalid_type,
        expected: k.number,
        received: a.parsedType
      }), D;
    }
    let r;
    const s = new ie();
    for (const a of this._def.checks)
      a.kind === "int" ? B.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? Ai(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.not_finite,
        message: a.message
      }), s.dirty()) : B.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new jt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new jt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: C.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: C.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: C.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: C.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && B.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
jt.create = (n) => new jt({
  checks: [],
  typeName: S.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...j(n)
});
class qt extends U {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== k.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new ie();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: w.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : B.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return I(t, {
      code: w.invalid_type,
      expected: k.bigint,
      received: t.parsedType
    }), D;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new qt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new qt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
qt.create = (n) => new qt({
  checks: [],
  typeName: S.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...j(n)
});
class fr extends U {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== k.boolean) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.boolean,
        received: r.parsedType
      }), D;
    }
    return _e(e.data);
  }
}
fr.create = (n) => new fr({
  typeName: S.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...j(n)
});
class On extends U {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== k.date) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: w.invalid_type,
        expected: k.date,
        received: a.parsedType
      }), D;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: w.invalid_date
      }), D;
    }
    const r = new ie();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), I(s, {
        code: w.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : B.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new On({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
On.create = (n) => new On({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: S.ZodDate,
  ...j(n)
});
class os extends U {
  _parse(e) {
    if (this._getType(e) !== k.symbol) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.symbol,
        received: r.parsedType
      }), D;
    }
    return _e(e.data);
  }
}
os.create = (n) => new os({
  typeName: S.ZodSymbol,
  ...j(n)
});
class hr extends U {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.undefined,
        received: r.parsedType
      }), D;
    }
    return _e(e.data);
  }
}
hr.create = (n) => new hr({
  typeName: S.ZodUndefined,
  ...j(n)
});
class mr extends U {
  _parse(e) {
    if (this._getType(e) !== k.null) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.null,
        received: r.parsedType
      }), D;
    }
    return _e(e.data);
  }
}
mr.create = (n) => new mr({
  typeName: S.ZodNull,
  ...j(n)
});
class gr extends U {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return _e(e.data);
  }
}
gr.create = (n) => new gr({
  typeName: S.ZodAny,
  ...j(n)
});
class us extends U {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return _e(e.data);
  }
}
us.create = (n) => new us({
  typeName: S.ZodUnknown,
  ...j(n)
});
class Be extends U {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return I(t, {
      code: w.invalid_type,
      expected: k.never,
      received: t.parsedType
    }), D;
  }
}
Be.create = (n) => new Be({
  typeName: S.ZodNever,
  ...j(n)
});
class cs extends U {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.void,
        received: r.parsedType
      }), D;
    }
    return _e(e.data);
  }
}
cs.create = (n) => new cs({
  typeName: S.ZodVoid,
  ...j(n)
});
class Te extends U {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== k.array)
      return I(t, {
        code: w.invalid_type,
        expected: k.array,
        received: t.parsedType
      }), D;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, u = t.data.length < s.exactLength.value;
      (i || u) && (I(t, {
        code: i ? w.too_big : w.too_small,
        minimum: u ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (I(t, {
      code: w.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (I(t, {
      code: w.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, u) => s.type._parseAsync(new Ie(t, i, t.path, u)))).then((i) => ie.mergeArray(r, i));
    const a = [...t.data].map((i, u) => s.type._parseSync(new Ie(t, i, t.path, u)));
    return ie.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new Te({
      ...this._def,
      minLength: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new Te({
      ...this._def,
      maxLength: { value: e, message: C.toString(t) }
    });
  }
  length(e, t) {
    return new Te({
      ...this._def,
      exactLength: { value: e, message: C.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Te.create = (n, e) => new Te({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: S.ZodArray,
  ...j(e)
});
function _t(n) {
  if (n instanceof Y) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Pe.create(_t(r));
    }
    return new Y({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof Te ? new Te({
    ...n._def,
    type: _t(n.element)
  }) : n instanceof Pe ? Pe.create(_t(n.unwrap())) : n instanceof lt ? lt.create(_t(n.unwrap())) : n instanceof ut ? ut.create(n.items.map((e) => _t(e))) : n;
}
class Y extends U {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = B.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== k.object) {
      const d = this._getOrReturnCtx(e);
      return I(d, {
        code: w.invalid_type,
        expected: k.object,
        received: d.parsedType
      }), D;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), u = [];
    if (!(this._def.catchall instanceof Be && this._def.unknownKeys === "strip"))
      for (const d in s.data)
        i.includes(d) || u.push(d);
    const p = [];
    for (const d of i) {
      const l = a[d], f = s.data[d];
      p.push({
        key: { status: "valid", value: d },
        value: l._parse(new Ie(s, f, s.path, d)),
        alwaysSet: d in s.data
      });
    }
    if (this._def.catchall instanceof Be) {
      const d = this._def.unknownKeys;
      if (d === "passthrough")
        for (const l of u)
          p.push({
            key: { status: "valid", value: l },
            value: { status: "valid", value: s.data[l] }
          });
      else if (d === "strict")
        u.length > 0 && (I(s, {
          code: w.unrecognized_keys,
          keys: u
        }), r.dirty());
      else if (d !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const d = this._def.catchall;
      for (const l of u) {
        const f = s.data[l];
        p.push({
          key: { status: "valid", value: l },
          value: d._parse(
            new Ie(s, f, s.path, l)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: l in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const d = [];
      for (const l of p) {
        const f = await l.key, h = await l.value;
        d.push({
          key: f,
          value: h,
          alwaysSet: l.alwaysSet
        });
      }
      return d;
    }).then((d) => ie.mergeObjectSync(r, d)) : ie.mergeObjectSync(r, p);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return C.errToObj, new Y({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: C.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new Y({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new Y({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new Y({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new Y({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: S.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new Y({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of B.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new Y({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of B.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new Y({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return _t(this);
  }
  partial(e) {
    const t = {};
    for (const r of B.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new Y({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of B.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Pe; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new Y({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return ea(B.objectKeys(this.shape));
  }
}
Y.create = (n, e) => new Y({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Be.create(),
  typeName: S.ZodObject,
  ...j(e)
});
Y.strictCreate = (n, e) => new Y({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Be.create(),
  typeName: S.ZodObject,
  ...j(e)
});
Y.lazycreate = (n, e) => new Y({
  shape: n,
  unknownKeys: "strip",
  catchall: Be.create(),
  typeName: S.ZodObject,
  ...j(e)
});
class Rn extends U {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const u of a)
        if (u.result.status === "valid")
          return u.result;
      for (const u of a)
        if (u.result.status === "dirty")
          return t.common.issues.push(...u.ctx.common.issues), u.result;
      const i = a.map((u) => new Me(u.ctx.common.issues));
      return I(t, {
        code: w.invalid_union,
        unionErrors: i
      }), D;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const p of r) {
        const d = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, l = p._parseSync({
          data: t.data,
          path: t.path,
          parent: d
        });
        if (l.status === "valid")
          return l;
        l.status === "dirty" && !a && (a = { result: l, ctx: d }), d.common.issues.length && i.push(d.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const u = i.map((p) => new Me(p));
      return I(t, {
        code: w.invalid_union,
        unionErrors: u
      }), D;
    }
  }
  get options() {
    return this._def.options;
  }
}
Rn.create = (n, e) => new Rn({
  options: n,
  typeName: S.ZodUnion,
  ...j(e)
});
const Ee = (n) => n instanceof Pn ? Ee(n.schema) : n instanceof dt ? Ee(n.innerType()) : n instanceof Mn ? [n.value] : n instanceof ct ? n.options : n instanceof yr ? B.objectValues(n.enum) : n instanceof $n ? Ee(n._def.innerType) : n instanceof hr ? [void 0] : n instanceof mr ? [null] : n instanceof Pe ? [void 0, ...Ee(n.unwrap())] : n instanceof lt ? [null, ...Ee(n.unwrap())] : n instanceof ta || n instanceof Ln ? Ee(n.unwrap()) : n instanceof Fn ? Ee(n._def.innerType) : [];
class Pr extends U {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.object)
      return I(t, {
        code: w.invalid_type,
        expected: k.object,
        received: t.parsedType
      }), D;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (I(t, {
      code: w.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), D);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = Ee(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const u of i) {
        if (s.has(u))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);
        s.set(u, a);
      }
    }
    return new Pr({
      typeName: S.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...j(r)
    });
  }
}
function _r(n, e) {
  const t = Fe(n), r = Fe(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === k.object && r === k.object) {
    const s = B.objectKeys(e), a = B.objectKeys(n).filter((u) => s.indexOf(u) !== -1), i = { ...n, ...e };
    for (const u of a) {
      const p = _r(n[u], e[u]);
      if (!p.valid)
        return { valid: !1 };
      i[u] = p.data;
    }
    return { valid: !0, data: i };
  } else if (t === k.array && r === k.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], u = e[a], p = _r(i, u);
      if (!p.valid)
        return { valid: !1 };
      s.push(p.data);
    }
    return { valid: !0, data: s };
  } else return t === k.date && r === k.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class Nn extends U {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (ss(a) || ss(i))
        return D;
      const u = _r(a.value, i.value);
      return u.valid ? ((as(a) || as(i)) && t.dirty(), { status: t.value, value: u.data }) : (I(r, {
        code: w.invalid_intersection_types
      }), D);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
Nn.create = (n, e, t) => new Nn({
  left: n,
  right: e,
  typeName: S.ZodIntersection,
  ...j(t)
});
class ut extends U {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.array)
      return I(r, {
        code: w.invalid_type,
        expected: k.array,
        received: r.parsedType
      }), D;
    if (r.data.length < this._def.items.length)
      return I(r, {
        code: w.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), D;
    !this._def.rest && r.data.length > this._def.items.length && (I(r, {
      code: w.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, u) => {
      const p = this._def.items[u] || this._def.rest;
      return p ? p._parse(new Ie(r, i, r.path, u)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => ie.mergeArray(t, i)) : ie.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new ut({
      ...this._def,
      rest: e
    });
  }
}
ut.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new ut({
    items: n,
    typeName: S.ZodTuple,
    rest: null,
    ...j(e)
  });
};
class Dn extends U {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.object)
      return I(r, {
        code: w.invalid_type,
        expected: k.object,
        received: r.parsedType
      }), D;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const u in r.data)
      s.push({
        key: a._parse(new Ie(r, u, r.path, u)),
        value: i._parse(new Ie(r, r.data[u], r.path, u)),
        alwaysSet: u in r.data
      });
    return r.common.async ? ie.mergeObjectAsync(t, s) : ie.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof U ? new Dn({
      keyType: e,
      valueType: t,
      typeName: S.ZodRecord,
      ...j(r)
    }) : new Dn({
      keyType: De.create(),
      valueType: e,
      typeName: S.ZodRecord,
      ...j(t)
    });
  }
}
class ds extends U {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.map)
      return I(r, {
        code: w.invalid_type,
        expected: k.map,
        received: r.parsedType
      }), D;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([u, p], d) => ({
      key: s._parse(new Ie(r, u, r.path, [d, "key"])),
      value: a._parse(new Ie(r, p, r.path, [d, "value"]))
    }));
    if (r.common.async) {
      const u = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const p of i) {
          const d = await p.key, l = await p.value;
          if (d.status === "aborted" || l.status === "aborted")
            return D;
          (d.status === "dirty" || l.status === "dirty") && t.dirty(), u.set(d.value, l.value);
        }
        return { status: t.value, value: u };
      });
    } else {
      const u = /* @__PURE__ */ new Map();
      for (const p of i) {
        const d = p.key, l = p.value;
        if (d.status === "aborted" || l.status === "aborted")
          return D;
        (d.status === "dirty" || l.status === "dirty") && t.dirty(), u.set(d.value, l.value);
      }
      return { status: t.value, value: u };
    }
  }
}
ds.create = (n, e, t) => new ds({
  valueType: e,
  keyType: n,
  typeName: S.ZodMap,
  ...j(t)
});
class Jt extends U {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.set)
      return I(r, {
        code: w.invalid_type,
        expected: k.set,
        received: r.parsedType
      }), D;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (I(r, {
      code: w.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (I(r, {
      code: w.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(p) {
      const d = /* @__PURE__ */ new Set();
      for (const l of p) {
        if (l.status === "aborted")
          return D;
        l.status === "dirty" && t.dirty(), d.add(l.value);
      }
      return { status: t.value, value: d };
    }
    const u = [...r.data.values()].map((p, d) => a._parse(new Ie(r, p, r.path, d)));
    return r.common.async ? Promise.all(u).then((p) => i(p)) : i(u);
  }
  min(e, t) {
    return new Jt({
      ...this._def,
      minSize: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new Jt({
      ...this._def,
      maxSize: { value: e, message: C.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Jt.create = (n, e) => new Jt({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: S.ZodSet,
  ...j(e)
});
class Pn extends U {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
Pn.create = (n, e) => new Pn({
  getter: n,
  typeName: S.ZodLazy,
  ...j(e)
});
class Mn extends U {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return I(t, {
        received: t.data,
        code: w.invalid_literal,
        expected: this._def.value
      }), D;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
Mn.create = (n, e) => new Mn({
  value: n,
  typeName: S.ZodLiteral,
  ...j(e)
});
function ea(n, e) {
  return new ct({
    values: n,
    typeName: S.ZodEnum,
    ...j(e)
  });
}
class ct extends U {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return I(t, {
        expected: B.joinValues(r),
        received: t.parsedType,
        code: w.invalid_type
      }), D;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return I(t, {
        received: t.data,
        code: w.invalid_enum_value,
        options: r
      }), D;
    }
    return _e(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return ct.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return ct.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
ct.create = ea;
class yr extends U {
  _parse(e) {
    const t = B.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== k.string && r.parsedType !== k.number) {
      const s = B.objectValues(t);
      return I(r, {
        expected: B.joinValues(s),
        received: r.parsedType,
        code: w.invalid_type
      }), D;
    }
    if (this._cache || (this._cache = new Set(B.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = B.objectValues(t);
      return I(r, {
        received: r.data,
        code: w.invalid_enum_value,
        options: s
      }), D;
    }
    return _e(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
yr.create = (n, e) => new yr({
  values: n,
  typeName: S.ZodNativeEnum,
  ...j(e)
});
class jn extends U {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.promise && t.common.async === !1)
      return I(t, {
        code: w.invalid_type,
        expected: k.promise,
        received: t.parsedType
      }), D;
    const r = t.parsedType === k.promise ? t.data : Promise.resolve(t.data);
    return _e(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
jn.create = (n, e) => new jn({
  type: n,
  typeName: S.ZodPromise,
  ...j(e)
});
class dt extends U {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === S.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        I(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (u) => {
          if (t.value === "aborted")
            return D;
          const p = await this._def.schema._parseAsync({
            data: u,
            path: r.path,
            parent: r
          });
          return p.status === "aborted" ? D : p.status === "dirty" || t.value === "dirty" ? Zt(p.value) : p;
        });
      {
        if (t.value === "aborted")
          return D;
        const u = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? D : u.status === "dirty" || t.value === "dirty" ? Zt(u.value) : u;
      }
    }
    if (s.type === "refinement") {
      const i = (u) => {
        const p = s.refinement(u, a);
        if (r.common.async)
          return Promise.resolve(p);
        if (p instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return u;
      };
      if (r.common.async === !1) {
        const u = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? D : (u.status === "dirty" && t.dirty(), i(u.value), { status: t.value, value: u.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((u) => u.status === "aborted" ? D : (u.status === "dirty" && t.dirty(), i(u.value).then(() => ({ status: t.value, value: u.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!Mt(i))
          return D;
        const u = s.transform(i.value, a);
        if (u instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: u };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => Mt(i) ? Promise.resolve(s.transform(i.value, a)).then((u) => ({
          status: t.value,
          value: u
        })) : D);
    B.assertNever(s);
  }
}
dt.create = (n, e, t) => new dt({
  schema: n,
  typeName: S.ZodEffects,
  effect: e,
  ...j(t)
});
dt.createWithPreprocess = (n, e, t) => new dt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: S.ZodEffects,
  ...j(t)
});
class Pe extends U {
  _parse(e) {
    return this._getType(e) === k.undefined ? _e(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Pe.create = (n, e) => new Pe({
  innerType: n,
  typeName: S.ZodOptional,
  ...j(e)
});
class lt extends U {
  _parse(e) {
    return this._getType(e) === k.null ? _e(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
lt.create = (n, e) => new lt({
  innerType: n,
  typeName: S.ZodNullable,
  ...j(e)
});
class $n extends U {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === k.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
$n.create = (n, e) => new $n({
  innerType: n,
  typeName: S.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...j(e)
});
class Fn extends U {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return En(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new Me(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new Me(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Fn.create = (n, e) => new Fn({
  innerType: n,
  typeName: S.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...j(e)
});
class ls extends U {
  _parse(e) {
    if (this._getType(e) !== k.nan) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: w.invalid_type,
        expected: k.nan,
        received: r.parsedType
      }), D;
    }
    return { status: "valid", value: e.data };
  }
}
ls.create = (n) => new ls({
  typeName: S.ZodNaN,
  ...j(n)
});
class ta extends U {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Mr extends U {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? D : a.status === "dirty" ? (t.dirty(), Zt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? D : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Mr({
      in: e,
      out: t,
      typeName: S.ZodPipeline
    });
  }
}
class Ln extends U {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (Mt(s) && (s.value = Object.freeze(s.value)), s);
    return En(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Ln.create = (n, e) => new Ln({
  innerType: n,
  typeName: S.ZodReadonly,
  ...j(e)
});
var S;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(S || (S = {}));
const c = De.create, A = jt.create, it = fr.create, Z = gr.create;
Be.create;
const J = Te.create, m = Y.create, na = Rn.create, le = Pr.create;
Nn.create;
ut.create;
const X = Dn.create, Ci = Pn.create, g = Mn.create, re = ct.create;
jn.create;
Pe.create;
lt.create;
function Ei() {
  return {};
}
function Oi(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== S.ZodAny && (t.items = G(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && z(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && z(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (z(t, "minItems", n.exactLength.value, n.exactLength.message, e), z(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function Ri(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "minimum", r.value, r.message, e) : z(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), z(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "maximum", r.value, r.message, e) : z(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), z(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        z(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Ni() {
  return {
    type: "boolean"
  };
}
function Di(n, e) {
  return G(n.type._def, e);
}
const Pi = (n, e) => G(n.innerType._def, e);
function ra(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => ra(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return Mi(n, e);
  }
}
const Mi = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        z(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        z(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function ji(n, e) {
  return {
    ...G(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function $i(n, e, t) {
  return e.effectStrategy === "input" ? G(n.schema._def, e, t) : {};
}
function Fi(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const Li = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function Zi(n, e) {
  const t = [
    G(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    G(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (Li(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: u, ...p } = a;
        i = p;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Ui(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let tr;
const Ve = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (tr === void 0 && (tr = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), tr),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function sa(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? qi(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          z(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          z(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              ve(t, "email", s.message, e);
              break;
            case "format:idn-email":
              ve(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              we(t, Ve.email, s.message, e);
              break;
          }
          break;
        case "url":
          ve(t, "uri", s.message, e);
          break;
        case "uuid":
          ve(t, "uuid", s.message, e);
          break;
        case "regex":
          we(t, s.regex, s.message, e);
          break;
        case "cuid":
          we(t, Ve.cuid, s.message, e);
          break;
        case "cuid2":
          we(t, Ve.cuid2, s.message, e);
          break;
        case "startsWith":
          we(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          we(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          ve(t, "date-time", s.message, e);
          break;
        case "date":
          ve(t, "date", s.message, e);
          break;
        case "time":
          ve(t, "time", s.message, e);
          break;
        case "duration":
          ve(t, "duration", s.message, e);
          break;
        case "length":
          z(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), z(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          we(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && ve(t, "ipv4", s.message, e), s.version !== "v4" && ve(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          we(t, Ve.emoji, s.message, e);
          break;
        case "ulid": {
          we(t, Ve.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              ve(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              z(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              we(t, Ve.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          we(t, Ve.nanoid, s.message, e);
      }
  return t;
}
const qi = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), ve = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : z(n, "format", e, t, r);
}, we = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: ps(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : z(n, "pattern", ps(e, r), t, r);
}, ps = (n, e) => {
  var d;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, u = !1, p = !1;
  for (let l = 0; l < s.length; l++) {
    if (i) {
      a += s[l], i = !1;
      continue;
    }
    if (r.i) {
      if (u) {
        if (s[l].match(/[a-z]/)) {
          p ? (a += s[l], a += `${s[l - 2]}-${s[l]}`.toUpperCase(), p = !1) : s[l + 1] === "-" && ((d = s[l + 2]) != null && d.match(/[a-z]/)) ? (a += s[l], p = !0) : a += `${s[l]}${s[l].toUpperCase()}`;
          continue;
        }
      } else if (s[l].match(/[a-z]/)) {
        a += `[${s[l]}${s[l].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[l] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[l] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[l] === ".") {
      a += u ? `${s[l]}\r
` : `[${s[l]}\r
]`;
      continue;
    }
    a += s[l], s[l] === "\\" ? i = !0 : u && s[l] === "]" ? u = !1 : !u && s[l] === "[" && (u = !0);
  }
  try {
    const l = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function aa(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === S.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((u, p) => ({
        ...u,
        [p]: G(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", p]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: G(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === S.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const u = Object.entries(sa(n.keyType._def, e)).reduce((p, [d, l]) => d === "type" ? p : { ...p, [d]: l }, {});
    return {
      ...t,
      propertyNames: u
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === S.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Ji(n, e) {
  if (e.mapStrategy === "record")
    return aa(n, e);
  const t = G(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = G(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function Bi(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function Gi() {
  return {
    not: {}
  };
}
function zi(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const Zn = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function Vi(n, e) {
  if (e.target === "openApi3")
    return fs(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in Zn && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = Zn[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, u) => u.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return fs(n, e);
}
const fs = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => G(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function Wi(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: Zn[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [Zn[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = G(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = G(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function Hi(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Ys(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "minimum", r.value, r.message, e) : z(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), z(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "maximum", r.value, r.message, e) : z(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), z(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        z(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Ki(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : G(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : G(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function Yi(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var p;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], u = G(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (u === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((p = a._def) == null ? void 0 : p.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: u
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: Ki(n, e)
  };
  return t.required.length || delete t.required, t;
}
const Xi = (n, e) => {
  if (e.propertyPath && e.currentPath.slice(0, e.propertyPath.length).toString() === e.propertyPath.toString())
    return G(n.innerType._def, { ...e, currentPath: e.currentPath });
  const t = G(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, Qi = (n, e) => {
  if (e.pipeStrategy === "input")
    return G(n.in._def, e);
  if (e.pipeStrategy === "output")
    return G(n.out._def, e);
  const t = G(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = G(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function eo(n, e) {
  return G(n.type._def, e);
}
function to(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: G(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && z(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && z(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function no(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => G(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: G(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => G(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function ro() {
  return {
    not: {}
  };
}
function so() {
  return {};
}
const ao = (n, e) => G(n.innerType._def, e);
function G(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const u = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (u !== Qa)
      return u;
  }
  if (r && !t) {
    const u = io(r, e);
    if (u !== void 0)
      return "$ref" in u && e.seenRefs.add(u.$ref), u;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = uo(n, n.typeName, e, t);
  return a && co(n, e, a), s.jsonSchema = a, a;
}
const io = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: oo(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, oo = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, uo = (n, e, t, r) => {
  switch (e) {
    case S.ZodString:
      return sa(n, t);
    case S.ZodNumber:
      return Hi(n, t);
    case S.ZodObject:
      return Yi(n, t);
    case S.ZodBigInt:
      return Ri(n, t);
    case S.ZodBoolean:
      return Ni();
    case S.ZodDate:
      return ra(n, t);
    case S.ZodUndefined:
      return ro();
    case S.ZodNull:
      return zi(t);
    case S.ZodArray:
      return Oi(n, t);
    case S.ZodUnion:
    case S.ZodDiscriminatedUnion:
      return Vi(n, t);
    case S.ZodIntersection:
      return Zi(n, t);
    case S.ZodTuple:
      return no(n, t);
    case S.ZodRecord:
      return aa(n, t);
    case S.ZodLiteral:
      return Ui(n, t);
    case S.ZodEnum:
      return Fi(n);
    case S.ZodNativeEnum:
      return Bi(n);
    case S.ZodNullable:
      return Wi(n, t);
    case S.ZodOptional:
      return Xi(n, t);
    case S.ZodMap:
      return Ji(n, t);
    case S.ZodSet:
      return to(n, t);
    case S.ZodLazy:
      return G(n.getter()._def, t);
    case S.ZodPromise:
      return eo(n, t);
    case S.ZodNaN:
    case S.ZodNever:
      return Gi();
    case S.ZodEffects:
      return $i(n, t, r);
    case S.ZodAny:
      return Ei();
    case S.ZodUnknown:
      return so();
    case S.ZodDefault:
      return ji(n, t);
    case S.ZodBranded:
      return Di(n, t);
    case S.ZodReadonly:
      return ao(n, t);
    case S.ZodCatch:
      return Pi(n, t);
    case S.ZodPipeline:
      return Qi(n, t);
    case S.ZodFunction:
    case S.ZodVoid:
    case S.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, co = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), lo = (n, e) => {
  const t = ni(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = G(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (ti(t.definitions))
      return;
    const p = {}, d = /* @__PURE__ */ new Set();
    for (let l = 0; l < 500; l++) {
      const f = Object.entries(t.definitions).filter(([h]) => !d.has(h));
      if (f.length === 0)
        break;
      for (const [h, x] of f)
        p[h] = G(lr(x), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, d.add(h);
    }
    return p;
  })(), u = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? u.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (u.$schema = "https://json-schema.org/draft/2019-09/schema#"), u;
};
function po(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function ia(n, e) {
  return lo(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function fo(n, e, t) {
  return Xa({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: ia(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function ho(n) {
  return po({
    type: "function",
    name: n.name,
    parameters: ia(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class ze extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class mo extends ze {
}
class hs extends ze {
}
class me extends ze {
}
class Q extends ze {
}
class ms extends ze {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class go extends ze {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class gs extends ze {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class vr extends ze {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function pt(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function _o(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function Un(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function jr(n, e) {
  const t = (r) => JSON.parse(r);
  if (pt(n)) {
    const r = ho({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new Q("Input type is not a ZodObject or a valid JSON schema");
}
function _s(n) {
  if (n === "text")
    return "text";
  if (pt(n)) {
    const e = fo(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function yo(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var bn = { exports: {} }, nr, ys;
function vo() {
  if (ys) return nr;
  ys = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  nr = function(l, f) {
    f = f || {};
    var h = typeof l;
    if (h === "string" && l.length > 0)
      return i(l);
    if (h === "number" && isFinite(l))
      return f.long ? p(l) : u(l);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(l)
    );
  };
  function i(l) {
    if (l = String(l), !(l.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        l
      );
      if (f) {
        var h = parseFloat(f[1]), x = (f[2] || "ms").toLowerCase();
        switch (x) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function u(l) {
    var f = Math.abs(l);
    return f >= r ? Math.round(l / r) + "d" : f >= t ? Math.round(l / t) + "h" : f >= e ? Math.round(l / e) + "m" : f >= n ? Math.round(l / n) + "s" : l + "ms";
  }
  function p(l) {
    var f = Math.abs(l);
    return f >= r ? d(l, f, r, "day") : f >= t ? d(l, f, t, "hour") : f >= e ? d(l, f, e, "minute") : f >= n ? d(l, f, n, "second") : l + " ms";
  }
  function d(l, f, h, x) {
    var b = f >= h * 1.5;
    return Math.round(l / h) + " " + x + (b ? "s" : "");
  }
  return nr;
}
var rr, vs;
function wo() {
  if (vs) return rr;
  vs = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = d, r.disable = u, r.enable = a, r.enabled = p, r.humanize = vo(), r.destroy = l, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let x = 0; x < f.length; x++)
        h = (h << 5) - h + f.charCodeAt(x), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, x = null, b, v;
      function R(...O) {
        if (!R.enabled)
          return;
        const M = R, q = Number(/* @__PURE__ */ new Date()), L = q - (h || q);
        M.diff = L, M.prev = h, M.curr = q, h = q, O[0] = r.coerce(O[0]), typeof O[0] != "string" && O.unshift("%O");
        let V = 0;
        O[0] = O[0].replace(/%([a-zA-Z%])/g, (ye, gt) => {
          if (ye === "%%")
            return "%";
          V++;
          const Lt = r.formatters[gt];
          if (typeof Lt == "function") {
            const wn = O[V];
            ye = Lt.call(M, wn), O.splice(V, 1), V--;
          }
          return ye;
        }), r.formatArgs.call(M, O), (M.log || r.log).apply(M, O);
      }
      return R.namespace = f, R.useColors = r.useColors(), R.color = r.selectColor(f), R.extend = s, R.destroy = r.destroy, Object.defineProperty(R, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => x !== null ? x : (b !== r.namespaces && (b = r.namespaces, v = r.enabled(f)), v),
        set: (O) => {
          x = O;
        }
      }), typeof r.init == "function" && r.init(R), R;
    }
    function s(f, h) {
      const x = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return x.log = this.log, x;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const x of h)
        x[0] === "-" ? r.skips.push(x.slice(1)) : r.names.push(x);
    }
    function i(f, h) {
      let x = 0, b = 0, v = -1, R = 0;
      for (; x < f.length; )
        if (b < h.length && (h[b] === f[x] || h[b] === "*"))
          h[b] === "*" ? (v = b, R = x, b++) : (x++, b++);
        else if (v !== -1)
          b = v + 1, R++, x = R;
        else
          return !1;
      for (; b < h.length && h[b] === "*"; )
        b++;
      return b === h.length;
    }
    function u() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function p(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function d(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function l() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return rr = n, rr;
}
var ws;
function bo() {
  return ws || (ws = 1, (function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let p = !1;
      return () => {
        p || (p = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let p;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (p = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(p[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(p) {
      if (p[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + p[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const d = "color: " + this.color;
      p.splice(1, 0, d, "color: inherit");
      let l = 0, f = 0;
      p[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (l++, h === "%c" && (f = l));
      }), p.splice(f, 0, d);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(p) {
      try {
        p ? e.storage.setItem("debug", p) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let p;
      try {
        p = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !p && typeof process < "u" && "env" in process && (p = process.env.DEBUG), p;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = wo()(e);
    const { formatters: u } = n.exports;
    u.j = function(p) {
      try {
        return JSON.stringify(p);
      } catch (d) {
        return "[UnexpectedJSONParseError]: " + d.message;
      }
    };
  })(bn, bn.exports)), bn.exports;
}
var xo = bo();
const So = /* @__PURE__ */ yo(xo);
function oa() {
  return Oo();
}
function bs(n) {
  const e = oa();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const ua = {
  get disabled() {
    return !0;
  }
}, ca = {
  get dontLogModelData() {
    return bs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return bs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, To = ca.dontLogModelData, Io = ca.dontLogToolData;
function da(n = "openai-agents") {
  return {
    namespace: n,
    debug: So(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: To,
    dontLogToolData: Io
  };
}
const E = da("openai-agents:core");
function Ge(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function ko(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function wr(n) {
  const e = n.name ? Un(n.name) : Un(n.execute.name), t = typeof n.errorFunction > "u" ? ko : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && pt(n.parameters))
    throw new Q("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = jr(n.parameters, e);
  async function i(d, l, f) {
    const [h, x] = await Dr(() => s(l));
    if (h !== null)
      throw E.dontLogToolData ? E.debug(`Invalid JSON input for tool ${e}`) : E.debug(`Invalid JSON input for tool ${e}: ${l}`), new me("Invalid JSON input for tool");
    E.dontLogToolData ? E.debug(`Invoking tool ${e}`) : E.debug(`Invoking tool ${e} with input ${l}`);
    const b = await n.execute(x, d, f), v = Ge(b);
    return E.dontLogToolData ? E.debug(`Tool ${e} completed`) : E.debug(`Tool ${e} returned: ${v}`), b;
  }
  async function u(d, l, f) {
    return i(d, l, f).catch((h) => {
      if (t) {
        const x = Gt();
        return x == null || x.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: h.toString()
          }
        }), t(d, h);
      }
      throw h;
    });
  }
  const p = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: u,
    needsApproval: p
  };
}
m({
  name: c(),
  description: c().optional(),
  inputSchema: m({
    type: g("object"),
    properties: X(c(), Z()),
    required: J(c()),
    additionalProperties: it()
  })
});
const sr = {};
async function Ao({ server: n, convertSchemasToStrict: e, runContext: t, agent: r }) {
  return n.cacheToolsList && sr[n.name] ? sr[n.name].map((s) => xs(s, n, e)) : Qo(async (s) => {
    const a = await n.listTools();
    let i = a;
    if (t && r) {
      const p = { runContext: t, agent: r, serverName: n.name }, d = [];
      for (const l of a) {
        const f = n.toolFilter;
        if (f)
          if (typeof f == "function") {
            if (!await f(p, l)) {
              E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const h = f.allowedToolNames ?? [], x = f.blockedToolNames ?? [];
            if (h.length > 0 || x.length > 0) {
              const b = h.length > 0 ? h.includes(l.name) : !0, v = x.length > 0 ? x.includes(l.name) : !1;
              if (!b || v) {
                v ? E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is blocked by the static filter.`) : b || E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is not allowed by the static filter.`);
                continue;
              }
            }
          }
        d.push(l);
      }
      i = d;
    }
    s.spanData.result = i.map((p) => p.name);
    const u = i.map((p) => xs(p, n, e));
    return n.cacheToolsList && (sr[n.name] = i), u;
  }, { data: { server: n.name } });
}
async function Co(n, e, t, r = !1) {
  const s = Array.isArray(n) ? {
    mcpServers: n,
    runContext: e,
    agent: t,
    convertSchemasToStrict: r
  } : n, { mcpServers: a, convertSchemasToStrict: i = !1, runContext: u, agent: p } = s, d = [], l = /* @__PURE__ */ new Set();
  for (const f of a) {
    const h = await Ao({
      server: f,
      convertSchemasToStrict: i,
      runContext: u,
      agent: p
    }), b = [...new Set(h.map((v) => v.name))].filter((v) => l.has(v));
    if (b.length > 0)
      throw new Q(`Duplicate tool names found across MCP servers: ${b.join(", ")}`);
    for (const v of h)
      l.add(v.name), d.push(v);
  }
  return d;
}
function xs(n, e, t) {
  var i, u, p, d;
  async function r(l, f) {
    let h = {};
    typeof l == "string" && l ? h = JSON.parse(l) : typeof l == "object" && l != null && (h = l);
    const x = Gt();
    x && (x.spanData.mcp_data = { server: e.name });
    const b = await e.callTool(n.name, h);
    return b.length === 1 ? b[0] : b;
  }
  const s = {
    ...n.inputSchema,
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((u = n.inputSchema) == null ? void 0 : u.properties) ?? {},
    required: ((p = n.inputSchema) == null ? void 0 : p.required) ?? [],
    additionalProperties: ((d = n.inputSchema) == null ? void 0 : d.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const l = Eo(s);
      return wr({
        name: n.name,
        description: n.description || "",
        parameters: l,
        strict: !0,
        execute: r
      });
    } catch (l) {
      E.warn(`Error converting MCP schema to strict mode: ${l}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return wr({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function Eo(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function Oo() {
  return {};
}
var xt, He;
class Vn {
  constructor() {
    T(this, xt, new EventTarget());
    T(this, He, /* @__PURE__ */ new Map());
  }
  on(e, t) {
    const r = e;
    let s = o(this, He).get(r);
    s || (s = /* @__PURE__ */ new Map(), o(this, He).set(r, s));
    let a = s.get(t);
    a || (a = /* @__PURE__ */ new Set(), s.set(t, a));
    const i = ((u) => t(...u.detail ?? []));
    return a.add(i), o(this, xt).addEventListener(r, i), this;
  }
  off(e, t) {
    const r = e, s = o(this, He).get(r), a = s == null ? void 0 : s.get(t);
    if (a != null && a.size) {
      for (const i of a)
        o(this, xt).removeEventListener(r, i);
      s == null || s.delete(t), (s == null ? void 0 : s.size) === 0 && o(this, He).delete(r);
    }
    return this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return o(this, xt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
xt = new WeakMap(), He = new WeakMap();
const la = crypto.randomUUID.bind(crypto), Ro = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, No = globalThis.ReadableStream, Do = globalThis.TransformStream;
class Po {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class Mo {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const jo = new Mo();
let Ss;
function ke() {
  return Ss ?? (Ss = new Po()), Ss;
}
function Bt() {
  const n = ke().getStore();
  return n != null && n.trace ? n.trace : null;
}
function Gt() {
  const n = ke().getStore();
  return n != null && n.span ? n.span : null;
}
function pa(n) {
  return async () => {
    const e = Bt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    return await e.end(), t;
  };
}
async function $o(n, e, t = {}) {
  const r = typeof n == "string" ? Ae().createTrace({
    ...t,
    name: n
  }) : n;
  return ke().run({ trace: r }, pa(e));
}
async function Fo(n, e = {}) {
  if (Bt())
    return await n();
  const r = Ae().createTrace(e);
  return ke().run({ trace: r }, pa(n));
}
function Tn(n) {
  const e = ke().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, ke().enterWith(e);
}
function Ut() {
  var e;
  const n = ke().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, ke().enterWith(n));
}
function bt(n) {
  const e = Gt();
  e && e.setError(n);
}
function Lo(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function br(n) {
  const e = ke().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = Lo(e);
  return ke().run(t, n);
}
class Zo {
  async export(e) {
    if (ua.disabled) {
      E.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId ? ` groupId=${t.groupId}` : ""}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var Yt, St, Xt, Qt, Tt, se, Oe, Le, Ze, It, ue, xr, Sr, yt;
class Uo {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    T(this, ue);
    T(this, Yt);
    T(this, St);
    T(this, Xt);
    T(this, Qt);
    T(this, Tt);
    T(this, se, []);
    T(this, Oe);
    T(this, Le, null);
    T(this, Ze, !1);
    T(this, It, null);
    y(this, Yt, t), y(this, St, r), y(this, Xt, s), y(this, Qt, t * a), y(this, Tt, e), y(this, Oe, jo), E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    y(this, It, new AbortController()), F(this, ue, Sr).call(this);
  }
  async onTraceStart(e) {
    await F(this, ue, xr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await F(this, ue, xr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && o(this, Oe).setTimeout(() => {
      var r;
      (r = o(this, It)) == null || r.abort();
    }, e), E.debug("Shutting down gracefully"); o(this, se).length > 0; ) {
      if (E.debug(`Waiting for buffer to empty. Items left: ${o(this, se).length}`), o(this, Ze) || await F(this, ue, yt).call(this, !0), (t = o(this, It)) != null && t.signal.aborted) {
        E.debug("Timeout reached, force flushing"), await F(this, ue, yt).call(this, !0);
        break;
      }
      await new Promise((r) => o(this, Oe).setTimeout(r, 500));
    }
    E.debug("Buffer empty. Exiting"), o(this, Oe) && o(this, Le) && o(this, Oe).clearTimeout(o(this, Le));
  }
  async forceFlush() {
    o(this, se).length > 0 && await F(this, ue, yt).call(this, !0);
  }
}
Yt = new WeakMap(), St = new WeakMap(), Xt = new WeakMap(), Qt = new WeakMap(), Tt = new WeakMap(), se = new WeakMap(), Oe = new WeakMap(), Le = new WeakMap(), Ze = new WeakMap(), It = new WeakMap(), ue = new WeakSet(), xr = async function(e) {
  if (o(this, se).length + 1 > o(this, Yt)) {
    E.error("Dropping trace because buffer is full");
    return;
  }
  o(this, se).push(e), o(this, se).length > o(this, Qt) && await F(this, ue, yt).call(this);
}, Sr = function() {
  y(this, Le, o(this, Oe).setTimeout(async () => {
    await F(this, ue, yt).call(this), F(this, ue, Sr).call(this);
  }, o(this, Xt))), typeof o(this, Le).unref == "function" && o(this, Le).unref();
}, yt = async function(e = !1) {
  if (o(this, se).length !== 0) {
    if (E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this, se).length}`), e || o(this, se).length < o(this, St)) {
      const t = [...o(this, se)];
      y(this, se, []), y(this, Ze, !0), await o(this, Tt).export(t), y(this, Ze, !1);
    } else if (o(this, se).length > 0) {
      const t = o(this, se).splice(0, o(this, St));
      y(this, Ze, !0), await o(this, Tt).export(t), y(this, Ze, !1);
    }
  }
};
var ce;
class qo {
  constructor() {
    T(this, ce, []);
  }
  start() {
    for (const e of o(this, ce))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    o(this, ce).push(e);
  }
  setProcessors(e) {
    E.debug("Shutting down old processors");
    for (const t of o(this, ce))
      t.shutdown();
    y(this, ce, e);
  }
  async onTraceStart(e) {
    for (const t of o(this, ce))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of o(this, ce))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of o(this, ce))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of o(this, ce))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of o(this, ce))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of o(this, ce))
      await e.forceFlush();
  }
}
ce = new WeakMap();
let ar = null, ir = null;
function Jo() {
  return ar || (ar = new Zo()), ar;
}
function fa() {
  return ir || (ir = new Uo(Jo())), ir;
}
function Ts() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function ha() {
  return `trace_${la().replace(/-/g, "")}`;
}
function Bo() {
  return `span_${la().replace(/-/g, "").slice(0, 24)}`;
}
function Go(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var en, tn, nn, rn, Ke, Ue, qe, Ye, sn;
const zr = class zr {
  constructor(e, t) {
    _(this, "type", "trace.span");
    T(this, en);
    T(this, tn);
    T(this, nn);
    T(this, rn);
    T(this, Ke);
    T(this, Ue);
    T(this, qe);
    T(this, Ye);
    T(this, sn);
    y(this, tn, e.traceId), y(this, nn, e.spanId ?? Bo()), y(this, en, e.data), y(this, Ke, t), y(this, rn, e.parentId ?? null), y(this, Ye, e.error ?? null), y(this, Ue, e.startedAt ?? null), y(this, qe, e.endedAt ?? null);
  }
  get traceId() {
    return o(this, tn);
  }
  get spanData() {
    return o(this, en);
  }
  get spanId() {
    return o(this, nn);
  }
  get parentId() {
    return o(this, rn);
  }
  get previousSpan() {
    return o(this, sn);
  }
  set previousSpan(e) {
    y(this, sn, e);
  }
  start() {
    if (o(this, Ue)) {
      E.warn("Span already started");
      return;
    }
    y(this, Ue, Ts()), o(this, Ke).onSpanStart(this);
  }
  end() {
    if (o(this, qe)) {
      E.debug("Span already finished", this.spanData);
      return;
    }
    y(this, qe, Ts()), o(this, Ke).onSpanEnd(this);
  }
  setError(e) {
    y(this, Ye, e);
  }
  get error() {
    return o(this, Ye);
  }
  get startedAt() {
    return o(this, Ue);
  }
  get endedAt() {
    return o(this, qe);
  }
  clone() {
    var t;
    const e = new zr({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: o(this, Ue) ?? void 0,
      endedAt: o(this, qe) ?? void 0,
      error: o(this, Ye) ?? void 0
    }, o(this, Ke));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Go(this.spanData),
      error: this.error
    };
  }
};
en = new WeakMap(), tn = new WeakMap(), nn = new WeakMap(), rn = new WeakMap(), Ke = new WeakMap(), Ue = new WeakMap(), qe = new WeakMap(), Ye = new WeakMap(), sn = new WeakMap();
let zt = zr;
class je extends zt {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var kt, Re;
const Vr = class Vr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    T(this, kt);
    T(this, Re);
    this.traceId = e.traceId ?? ha(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, y(this, kt, t ?? fa()), y(this, Re, e.started ?? !1);
  }
  async start() {
    o(this, Re) || (y(this, Re, !0), await o(this, kt).onTraceStart(this));
  }
  async end() {
    o(this, Re) && (y(this, Re, !1), await o(this, kt).onTraceEnd(this));
  }
  clone() {
    return new Vr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: o(this, Re)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
kt = new WeakMap(), Re = new WeakMap();
let Vt = Vr;
class or extends Vt {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var ne, Xe, Gn, ma;
class zo {
  constructor() {
    T(this, Gn);
    T(this, ne);
    T(this, Xe);
    y(this, ne, new qo()), y(this, Xe, ua.disabled), F(this, Gn, ma).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    o(this, ne).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    o(this, ne).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return Bt();
  }
  getCurrentSpan() {
    return Gt();
  }
  setDisabled(e) {
    y(this, Xe, e);
  }
  startExportLoop() {
    o(this, ne).start();
  }
  createTrace(e) {
    if (o(this, Xe))
      return E.debug("Tracing is disabled, Not creating trace %o", e), new or();
    const t = e.traceId ?? ha(), r = e.name ?? "Agent workflow";
    return E.debug("Creating trace %s with name %s", t, r), new Vt({ ...e, name: r, traceId: t }, o(this, ne));
  }
  createSpan(e, t) {
    if (o(this, Xe) || e.disabled)
      return E.debug("Tracing is disabled, Not creating span %o", e), new je(e.data, o(this, ne));
    let r, s;
    if (t) {
      if (t instanceof Vt) {
        if (t instanceof or)
          return E.debug("Parent trace is no-op, returning NoopSpan"), new je(e.data, o(this, ne));
        s = t.traceId;
      } else if (t instanceof zt) {
        if (t instanceof je)
          return E.debug("Parent span is no-op, returning NoopSpan"), new je(e.data, o(this, ne));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = Bt(), i = Gt();
      if (!a)
        return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new je(e.data, o(this, ne));
      if (i instanceof je || a instanceof or)
        return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new je(e.data, o(this, ne));
      s = a.traceId, i ? (E.debug("Using parent span %s", i.spanId), r = i.spanId) : E.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new zt({
      ...e,
      traceId: s,
      parentId: r
    }, o(this, ne))) : (E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new je(e.data, o(this, ne)));
  }
  async shutdown(e) {
    try {
      E.debug("Shutting down tracing provider"), await o(this, ne).shutdown(e);
    } catch (t) {
      E.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await o(this, ne).forceFlush();
  }
}
ne = new WeakMap(), Xe = new WeakMap(), Gn = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
ma = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), Is("SIGINT") || process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), Is("SIGTERM") || process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      E.error("Unhandled rejection", t, r), await e(), Vo("unhandledRejection") || process.exit(1);
    });
  }
};
function Is(n) {
  return process.listeners(n).length > 1;
}
function Vo(n) {
  return process.listeners(n).length > 1;
}
let ur;
function Ae() {
  return ur || (ur = new zo()), ur;
}
function Wn(n) {
  return async (e, ...t) => br(async () => {
    const r = n(...t);
    Tn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Ut();
    }
  });
}
function ks(n, e) {
  var t;
  return Ae().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function Wo(n, e) {
  var t, r;
  return Ae().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const As = Wn(Wo);
function Ho(n, e) {
  return Ae().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const Ko = Wn(Ho);
function Yo(n, e) {
  return Ae().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Cs = Wn(Yo);
function Xo(n, e) {
  return Ae().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Qo = Wn(Xo);
function eu(n) {
  Ae().registerProcessor(n);
}
class $r {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class tu extends $r {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Vn());
  }
}
class nu extends $r {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Vn());
  }
}
const ru = "OPENAI_DEFAULT_MODEL";
function Hn(n) {
  return n.startsWith("gpt-5-chat") ? !1 : n.startsWith("gpt-5");
}
function ga() {
  return Hn(_a());
}
function _a() {
  var e;
  return ((e = oa()[ru]) == null ? void 0 : e.toLowerCase()) ?? "gpt-4.1";
}
function su(n) {
  const e = _a();
  return Hn(e) ? {
    providerData: {
      // We chose "low" instead of "minimal" because some of the built-in tools
      // (e.g., file search, image generation, etc.) do not support "minimal"
      // If you want to use "minimal" reasoning effort, you can pass your own model settings
      reasoning: { effort: "low" },
      text: { verbosity: "low" }
    }
  } : {};
}
function Es({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function Tr({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function ya(n) {
  return JSON.stringify({ assistant: n.name });
}
function au(n) {
  return `transfer_to_${Un(n.name)}`;
}
function iu(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class va {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = au(e), this.toolDescription = iu(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function wa(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new Q("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(p, d) {
    var l;
    if (t) {
      if (!d)
        throw bt({
          message: `Handoff function expected non empty input but got: ${d}`,
          data: {
            details: "input is empty"
          }
        }), new me("Handoff function expected non empty input");
      try {
        const f = await t(d);
        e.onHandoff && await e.onHandoff(p, f);
      } catch (f) {
        throw bt({
          message: "Invalid JSON provided",
          data: {}
        }), E.dontLogToolData || E.error(`Invalid JSON when parsing: ${d}. Error: ${f}`), new me("Invalid JSON provided");
      }
    } else
      await ((l = e.onHandoff) == null ? void 0 : l.call(e, p));
    return n;
  }
  const u = new va(n, i);
  if (e.inputType) {
    const p = jr(e.inputType, u.toolName);
    u.inputJsonSchema = p.schema, u.strictJsonSchema = !0, t = p.parser;
  }
  return e.toolNameOverride && (u.toolName = e.toolNameOverride), e.toolDescriptionOverride && (u.toolDescription = e.toolDescriptionOverride), e.inputFilter && (u.inputFilter = e.inputFilter), u;
}
function qn(n) {
  return n instanceof va ? n : wa(n);
}
function ou() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const te = m({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: X(c(), Z()).optional()
}), ht = te.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: c().optional()
}), uu = te.extend({
  type: g("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: c()
}), cu = te.extend({
  type: g("output_text"),
  /**
   * The text output from the model.
   */
  text: c()
}), ba = te.extend({
  type: g("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: c()
}), du = te.extend({
  type: g("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: c()
}), lu = te.extend({
  type: g("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: c().or(m({
    id: c()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), pu = te.extend({
  type: g("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: c().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({
    id: c().describe("OpenAI file ID")
  })).or(m({
    url: c().describe("Publicly accessible PDF file URL")
  })).describe("Contents of the file or an object with a file ID.")
}), xa = te.extend({
  type: g("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: c().or(m({
    id: c()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: c().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: c().nullable().optional()
}), fu = te.extend({
  type: g("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: c().describe("Base64 encoded image data")
}), hu = te.extend({
  type: g("text"),
  /**
   * The text output from the model.
   */
  text: c()
}), mu = te.extend({
  type: g("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: c().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: c().describe("IANA media type of the image")
}), gu = te.extend({
  type: g("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: c().describe("Base64 encoded image data or URL")
}), _u = le("type", [
  m({ type: g("screenshot") }),
  m({
    type: g("click"),
    x: A(),
    y: A(),
    button: re(["left", "right", "wheel", "back", "forward"])
  }),
  m({
    type: g("double_click"),
    x: A(),
    y: A()
  }),
  m({
    type: g("scroll"),
    x: A(),
    y: A(),
    scroll_x: A(),
    scroll_y: A()
  }),
  m({
    type: g("type"),
    text: c()
  }),
  m({ type: g("wait") }),
  m({
    type: g("move"),
    x: A(),
    y: A()
  }),
  m({
    type: g("keypress"),
    keys: J(c())
  }),
  m({
    type: g("drag"),
    path: J(m({ x: A(), y: A() }))
  })
]), yu = le("type", [
  cu,
  uu,
  xa,
  fu
]), Fr = ht.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: g("message").optional()
}), Kn = Fr.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: g("assistant"),
  /**
   * The status of the message.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: J(yu)
}), vu = le("type", [
  ba,
  lu,
  pu,
  xa
]), Sa = Fr.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: g("user"),
  /**
   * The content of the message.
   */
  content: J(vu).or(c())
}), Ta = Fr.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: g("system"),
  /**
   * The content of the message.
   */
  content: c()
});
le("role", [
  Ta,
  Kn,
  Sa
]);
const Wt = ht.extend({
  type: g("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: c().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: c().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: c().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: c().optional()
}), Ht = ht.extend({
  type: g("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: c().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: re(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: c()
}), Ir = ht.extend({
  type: g("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: c().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: le("type", [hu, mu])
}), Lr = ht.extend({
  type: g("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: _u
}), wu = ht.extend({
  type: g("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: gu
}), bu = le("type", [
  Lr,
  Ht,
  Wt
]), Zr = te.extend({
  id: c().optional(),
  type: g("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: J(ba),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: J(du).optional()
}), Ia = ht.extend({
  type: g("unknown")
}), Ur = le("type", [
  Kn,
  Wt,
  Ht,
  Lr,
  Zr,
  Ia
]), xu = na([
  Sa,
  Kn,
  Ta,
  Wt,
  Ht,
  Lr,
  Ir,
  wu,
  Zr,
  Ia
]), Su = m({
  requests: A().optional(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A(),
  inputTokensDetails: X(c(), A()).optional(),
  outputTokensDetails: X(c(), A()).optional()
}), ka = te.extend({
  type: g("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: c()
}), Tu = te.extend({
  type: g("response_started")
}), Aa = te.extend({
  type: g("response_done"),
  /**
   * The response from the model.
   */
  response: te.extend({
    /**
     * The ID of the response.
     */
    id: c(),
    /**
     * The usage data for the response.
     */
    usage: Su,
    /**
     * The output from the model.
     */
    output: J(Ur)
  })
}), Iu = te.extend({
  type: g("model"),
  event: Z().describe("The event from the model")
});
le("type", [
  ka,
  Aa,
  Tu,
  Iu
]);
class Yn {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    if (typeof e > "u")
      this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = [];
    else {
      this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? (e == null ? void 0 : e.input_tokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? (e == null ? void 0 : e.output_tokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? (e == null ? void 0 : e.total_tokens) ?? 0;
      const t = (e == null ? void 0 : e.inputTokensDetails) ?? (e == null ? void 0 : e.input_tokens_details);
      this.inputTokensDetails = t ? [t] : [];
      const r = (e == null ? void 0 : e.outputTokensDetails) ?? (e == null ? void 0 : e.output_tokens_details);
      this.outputTokensDetails = r ? [r] : [];
    }
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var de;
class vt {
  constructor(e = {}) {
    /**
     * The context object you passed to the `Runner.run()` method.
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    T(this, de);
    this.context = e, this.usage = new Yn(), y(this, de, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    y(this, de, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved({ toolName: e, callId: t }) {
    const r = o(this, de).get(e);
    if ((r == null ? void 0 : r.approved) === !0 && r.rejected === !0)
      return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((r == null ? void 0 : r.approved) === !0)
      return !0;
    if ((r == null ? void 0 : r.rejected) === !0)
      return !1;
    const s = Array.isArray(r == null ? void 0 : r.approved) ? r.approved.includes(t) : !1, a = Array.isArray(r == null ? void 0 : r.rejected) ? r.rejected.includes(t) : !1;
    if (s && a)
      return E.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (s)
      return !0;
    if (a)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, de).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = o(this, de).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    o(this, de).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, de).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = o(this, de).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    o(this, de).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(o(this, de).entries())
    };
  }
}
de = new WeakMap();
class Ca {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Kt(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return Kt([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    E.warn("Accessed finalOutput before agent run is completed.");
  }
}
class cr extends Ca {
  constructor(e) {
    super(e);
  }
}
var an, At, be, Je, Ct, on, un, cn;
class ku extends Ca {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    T(this, an, null);
    T(this, At);
    T(this, be);
    T(this, Je);
    T(this, Ct);
    T(this, on);
    T(this, un);
    T(this, cn, !1);
    y(this, At, t.signal), o(this, At) && o(this, At).addEventListener("abort", async () => {
      await o(this, Je).cancel();
    }), y(this, Je, new No({
      start: (r) => {
        y(this, be, r);
      },
      cancel: () => {
        y(this, cn, !0);
      }
    })), y(this, Ct, new Promise((r, s) => {
      y(this, on, r), y(this, un, s);
    }));
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = o(this, be)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && o(this, be) && (o(this, be).close(), y(this, be, void 0), (t = o(this, on)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && o(this, be) && (o(this, be).error(t), y(this, be, void 0)), y(this, an, t), (r = o(this, un)) == null || r.call(this, t), o(this, Ct).catch((s) => {
      E.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return o(this, cn);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return o(this, Je);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return o(this, Ct);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return o(this, an);
  }
  toTextStream(t = {}) {
    const r = o(this, Je).pipeThrough(new Do({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = ka.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? Ro.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return o(this, Je)[Symbol.asyncIterator]();
  }
}
an = new WeakMap(), At = new WeakMap(), be = new WeakMap(), Je = new WeakMap(), Ct = new WeakMap(), on = new WeakMap(), un = new WeakMap(), cn = new WeakMap();
function Os(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function Rs(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class mt {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Xn extends mt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class ot extends mt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class $t extends mt {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: Ge(this.output)
    };
  }
}
class qr extends mt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Jr extends mt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Br extends mt {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class ge extends mt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function Ea(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function Au(n) {
  return n.output.length === 0 ? "" : Ea(n.output[n.output.length - 1]) || "";
}
class Cu {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class Eu {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class Ou {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function Ns(n, e, t, r) {
  var b;
  const s = [], a = [], i = [], u = [], p = [], d = [], l = new Map(r.map((v) => [v.toolName, v])), f = new Map(t.filter((v) => v.type === "function").map((v) => [v.name, v])), h = t.find((v) => v.type === "computer"), x = new Map(t.filter((v) => {
    var R;
    return v.type === "hosted_tool" && ((R = v.providerData) == null ? void 0 : R.type) === "mcp";
  }).map((v) => v).map((v) => [v.providerData.server_label, v]));
  for (const v of n.output) {
    if (v.type === "message")
      v.role === "assistant" && s.push(new Xn(v, e));
    else if (v.type === "hosted_tool_call") {
      s.push(new ot(v, e));
      const O = v.name;
      if (d.push(O), ((b = v.providerData) == null ? void 0 : b.type) === "mcp_approval_request" || v.name === "mcp_approval_request") {
        const M = v.providerData, q = M.server_label, L = x.get(q);
        if (typeof L > "u") {
          const pe = `MCP server (${q}) not found in Agent (${e.name})`;
          throw bt({
            message: pe,
            data: { mcp_server_label: q }
          }), new me(pe);
        }
        const V = new ge({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: M.name,
          id: M.id,
          status: "in_progress",
          providerData: M
        }, e);
        p.push({
          requestItem: V,
          mcpTool: L
        }), L.providerData.on_approval || s.push(V);
      }
    } else if (v.type === "reasoning")
      s.push(new qr(v, e));
    else if (v.type === "computer_call") {
      if (s.push(new ot(v, e)), d.push("computer_use"), !h)
        throw bt({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new me("Model produced computer action without a computer tool.");
      u.push({
        toolCall: v,
        computer: h
      });
    }
    if (v.type !== "function_call")
      continue;
    d.push(v.name);
    const R = l.get(v.name);
    if (R)
      s.push(new Jr(v, e)), a.push({
        toolCall: v,
        handoff: R
      });
    else {
      const O = f.get(v.name);
      if (!O)
        throw bt({
          message: `Tool ${v.name} not found in agent ${e.name}.`,
          data: {
            tool_name: v.name,
            agent_name: e.name
          }
        }), new me(`Tool ${v.name} not found in agent ${e.name}.`);
      s.push(new ot(v, e)), i.push({
        toolCall: v,
        tool: O
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: u,
    mcpApprovalRequests: p,
    toolsUsed: d,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || p.length > 0 || u.length > 0;
    }
  };
}
const Ru = le("type", [
  m({
    type: g("next_step_handoff"),
    newAgent: Z()
  }),
  m({
    type: g("next_step_final_output"),
    output: c()
  }),
  m({
    type: g("next_step_run_again")
  }),
  m({
    type: g("next_step_interruption"),
    data: X(c(), Z())
  })
]);
class fe {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function Ds(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function Ps(n, e, t, r, s, a, i) {
  const u = t.filter((b) => b instanceof ge && "callId" in b.rawItem && b.rawItem.type === "function_call").map((b) => b.rawItem.callId), p = s.functions.filter((b) => u.includes(b.toolCall.callId)), d = await Oa(n, p, a, i), l = d.map((b) => b.runItem), f = s.mcpApprovalRequests.filter((b) => {
    var v;
    return b.requestItem.type === "tool_approval_item" && b.requestItem.rawItem.type === "hosted_tool_call" && ((v = b.requestItem.rawItem.providerData) == null ? void 0 : v.type) === "mcp_approval_request";
  });
  for (const b of f) {
    const v = b.requestItem.rawItem.id, R = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: b.requestItem.rawItem.name,
      callId: v
    });
    if (typeof R < "u") {
      const O = {
        approve: R,
        approval_request_id: v,
        reason: void 0
      };
      l.push(new ot({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: O
      }, n));
    }
  }
  const h = await Ra(n, d, i), x = t.filter((b) => !(b instanceof ge));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new fe(e, r, x, l, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new fe(e, r, x, l, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new fe(e, r, x, l, { type: "next_step_run_again" });
}
async function Ms(n, e, t, r, s, a, i) {
  var R, O, M, q;
  const u = t;
  let p = s.newItems;
  const [d, l] = await Promise.all([
    Oa(n, s.functions, a, i),
    Du(n, s.computerActions, a, i._context)
  ]);
  if (p = p.concat(d.map((L) => L.runItem)), p = p.concat(l), s.mcpApprovalRequests.length > 0)
    for (const L of s.mcpApprovalRequests) {
      const V = L.mcpTool.providerData, pe = L.requestItem.rawItem.providerData;
      if (V.on_approval) {
        const ye = await V.on_approval(i._context, L.requestItem), gt = {
          approve: ye.approve,
          approval_request_id: pe.id,
          reason: ye.reason
        };
        p.push(new ot({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: gt
        }, n));
      } else {
        p.push(L.requestItem);
        const ye = {
          type: "hosted_mcp_tool_approval",
          tool: L.mcpTool,
          runItem: new ge({
            type: "hosted_tool_call",
            name: pe.name,
            id: pe.id,
            arguments: pe.arguments,
            status: "in_progress",
            providerData: pe
          }, n)
        };
        d.push(ye);
      }
    }
  if (s.handoffs.length > 0)
    return await Pu(n, e, u, p, r, s.handoffs, a, i._context);
  const f = await Ra(n, d, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new fe(e, r, u, p, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new fe(e, r, u, p, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  if ((((R = s.functions) == null ? void 0 : R.length) ?? 0) > 0 || (((O = s.computerActions) == null ? void 0 : O.length) ?? 0) > 0 || (((M = s.mcpApprovalRequests) == null ? void 0 : M.length) ?? 0) > 0 || (((q = s.handoffs) == null ? void 0 : q.length) ?? 0) > 0)
    return new fe(e, r, u, p, { type: "next_step_run_again" });
  const x = p.filter((L) => L instanceof Xn), b = x.length > 0 ? Ea(x[x.length - 1].rawItem) : void 0;
  if (typeof b > "u")
    return new fe(e, r, u, p, { type: "next_step_run_again" });
  if (!d.some((L) => L.runItem instanceof ge)) {
    if (n.outputType === "text")
      return new fe(e, r, u, p, {
        type: "next_step_final_output",
        output: b
      });
    if (n.outputType !== "text" && b) {
      const { parser: L } = jr(n.outputType, "final_output"), [V] = await Dr(() => L(b));
      if (V)
        throw bt({
          message: "Invalid output type",
          data: {
            error: String(V)
          }
        }), new me("Invalid output type");
      return new fe(e, r, u, p, { type: "next_step_final_output", output: b });
    }
  }
  return new fe(e, r, u, p, { type: "next_step_run_again" });
}
function Jn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: Ge(e)
    }
  };
}
async function Oa(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (pt(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const p = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (p === !1)
        return As(async (d) => {
          const l = "Tool execution was not approved.";
          return d.setError({
            message: l,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), d.spanData.output = l, {
            type: "function_output",
            tool: a.tool,
            output: l,
            runItem: new $t(Jn(a.toolCall, l), n, l)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (p !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new ge(a.toolCall, n)
        };
    }
    return As(async (p) => {
      t.config.traceIncludeSensitiveData && (p.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const d = await a.tool.invoke(r._context, a.toolCall.arguments, { toolCall: a.toolCall }), l = Ge(d);
        t.emit("agent_tool_end", r._context, n, a.tool, l, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, l, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (p.spanData.output = l);
        const f = {
          type: "function_output",
          tool: a.tool,
          output: d,
          runItem: new $t(Jn(a.toolCall, d), n, d)
        }, h = Gu(a.toolCall);
        if (h) {
          f.agentRunResult = h;
          const x = h.interruptions;
          x.length > 0 && (f.interruptions = x);
        }
        return f;
      } catch (d) {
        throw p.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(d)
          }
        }), d;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new go(`Failed to run function tools: ${a}`, a, r);
  }
}
async function Nu(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function Du(n, e, t, r, s = void 0) {
  const a = s ?? E, i = [];
  for (const u of e) {
    const p = u.computer.computer, d = u.toolCall;
    t.emit("agent_tool_start", r, n, u.computer, {
      toolCall: d
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, u.computer, { toolCall: d });
    let l;
    try {
      l = await Nu(p, d);
    } catch (x) {
      a.error("Failed to execute computer action:", x), l = "";
    }
    t.emit("agent_tool_end", r, n, u.computer, l, {
      toolCall: d
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, u.computer, l, {
      toolCall: d
    });
    const f = l ? `data:image/png;base64,${l}` : "", h = {
      type: "computer_call_result",
      callId: d.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new $t(h, n, f));
  }
  return i;
}
async function Pu(n, e, t, r, s, a, i, u) {
  if (r = [...r], a.length === 0)
    return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new fe(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const d = "Multiple handoffs detected, ignoring this one.";
    for (let l = 1; l < a.length; l++)
      r.push(new $t(Jn(a[l].toolCall, d), n, d));
  }
  const p = a[0];
  return Ko(async (d) => {
    const l = p.handoff, f = await l.onInvokeHandoff(u, p.toolCall.arguments);
    if (d.spanData.to_agent = f.name, a.length > 1) {
      const x = a.map((b) => b.handoff.agentName);
      d.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: x
        }
      });
    }
    r.push(new Br(Jn(p.toolCall, ya(f)), n, f)), i.emit("agent_handoff", u, n, f), n.emit("agent_handoff", u, f);
    const h = l.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      E.debug("Filtering inputs for handoff"), typeof h != "function" && d.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const x = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r],
        runContext: u
      }, b = h(x);
      e = b.inputHistory, t = b.preHandoffItems, r = b.newItems;
    }
    return new fe(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const xn = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function Ra(n, e, t) {
  if (e.length === 0)
    return xn;
  const r = [];
  for (const i of e)
    if (i.runItem instanceof ge && r.push(i.runItem), i.type === "function_output") {
      if (Array.isArray(i.interruptions))
        r.push(...i.interruptions);
      else if (i.agentRunResult) {
        const u = i.agentRunResult.interruptions;
        u.length > 0 && r.push(...u);
      }
    }
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return xn;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ge(s.output)
    } : xn;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((u) => a.stopAtToolNames.includes(u.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ge(i.output)
    } : xn;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new Q(`Invalid toolUseBehavior: ${a}`, t);
}
function js(n, e) {
  for (const t of e.newStepItems) {
    let r;
    if (t instanceof Xn)
      r = "message_output_created";
    else if (t instanceof Jr)
      r = "handoff_requested";
    else if (t instanceof Br)
      r = "handoff_occurred";
    else if (t instanceof ot)
      r = "tool_called";
    else if (t instanceof $t)
      r = "tool_output";
    else if (t instanceof qr)
      r = "reasoning_item_created";
    else if (t instanceof ge)
      r = "tool_approval_requested";
    else {
      E.warn("Unknown item type: ", t);
      continue;
    }
    n._addItem(new Eu(r, t));
  }
}
var Et;
class $s {
  constructor() {
    T(this, Et, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    o(this, Et).set(e, t);
  }
  hasUsedTools(e) {
    return o(this, Et).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(o(this, Et).entries()).map(([e, t]) => [e.name, t]));
  }
}
Et = new WeakMap();
const In = "1.0", Mu = g(In), xe = m({
  name: c()
}), ju = m({
  object: g("trace.span"),
  id: c(),
  trace_id: c(),
  parent_id: c().nullable(),
  started_at: c().nullable(),
  ended_at: c().nullable(),
  error: m({
    message: c(),
    data: X(c(), Z()).optional()
  }).nullable(),
  span_data: X(c(), Z())
}), Na = ju.extend({
  previous_span: Ci(() => Na).optional()
}), Da = m({
  requests: A(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A()
}), Fs = m({
  usage: Da,
  output: J(Ur),
  responseId: c().optional(),
  providerData: X(c(), Z()).optional()
}), Pa = le("type", [
  m({
    type: g("message_output_item"),
    rawItem: Kn,
    agent: xe
  }),
  m({
    type: g("tool_call_item"),
    rawItem: bu.or(Wt),
    agent: xe
  }),
  m({
    type: g("tool_call_output_item"),
    rawItem: Ir,
    agent: xe,
    output: c()
  }),
  m({
    type: g("reasoning_item"),
    rawItem: Zr,
    agent: xe
  }),
  m({
    type: g("handoff_call_item"),
    rawItem: Ht,
    agent: xe
  }),
  m({
    type: g("handoff_output_item"),
    rawItem: Ir,
    sourceAgent: xe,
    targetAgent: xe
  }),
  m({
    type: g("tool_approval_item"),
    rawItem: Ht.or(Wt),
    agent: xe
  })
]), $u = m({
  object: g("trace"),
  id: c(),
  workflow_name: c(),
  group_id: c().nullable(),
  metadata: X(c(), Z())
}), Fu = m({
  newItems: J(Pa),
  toolsUsed: J(c()),
  handoffs: J(m({
    toolCall: Z(),
    handoff: Z()
  })),
  functions: J(m({
    toolCall: Z(),
    tool: Z()
  })),
  computerActions: J(m({
    toolCall: Z(),
    computer: Z()
  })),
  mcpApprovalRequests: J(m({
    requestItem: m({
      // protocol.HostedToolCallItem
      rawItem: m({
        type: g("hosted_tool_call"),
        name: c(),
        arguments: c().optional(),
        status: c().optional(),
        output: c().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: X(c(), Z()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: m({
      type: g("hosted_tool"),
      name: g("hosted_mcp"),
      providerData: X(c(), Z())
    })
  })).optional()
}), Ma = m({
  tripwireTriggered: it(),
  outputInfo: Z()
}), Lu = m({
  guardrail: m({
    type: g("input"),
    name: c()
  }),
  output: Ma
}), Zu = m({
  guardrail: m({
    type: g("output"),
    name: c()
  }),
  agentOutput: Z(),
  agent: xe,
  output: Ma
}), Ls = m({
  $schemaVersion: Mu,
  currentTurn: A(),
  currentAgent: xe,
  originalInput: c().or(J(xu)),
  modelResponses: J(Fs),
  context: m({
    usage: Da,
    approvals: X(c(), m({
      approved: J(c()).or(it()),
      rejected: J(c()).or(it())
    })),
    context: X(c(), Z())
  }),
  toolUseTracker: X(c(), J(c())),
  maxTurns: A(),
  currentAgentSpan: Na.nullable().optional(),
  noActiveAgentRun: it(),
  inputGuardrailResults: J(Lu),
  outputGuardrailResults: J(Zu),
  currentStep: Ru.optional(),
  lastModelResponse: Fs.optional(),
  generatedItems: J(Pa),
  lastProcessedResponse: Fu.optional(),
  trace: $u.nullable()
});
class We {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new $s(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = Bt();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Kt(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: In,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = Ls.safeParse(e);
    if (!t.success)
      throw new mo(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, x, b, v;
    const [r, s] = await Dr(() => JSON.parse(t));
    if (r)
      throw new Q(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new Q("Run state is missing schema version");
    if (a !== In)
      throw new Q(`Run state schema version ${a} is not supported. Please use version ${In}`);
    const i = Ls.parse(JSON.parse(t)), u = Uu(e), p = new vt(i.context.context);
    p._rebuildApprovals(i.context.approvals);
    const d = u.get(i.currentAgent.name);
    if (!d)
      throw new Q(`Agent ${i.currentAgent.name} not found`);
    const l = new We(p, "", d, i.maxTurns);
    l._currentTurn = i.currentTurn, l._toolUseTracker = new $s();
    for (const [R, O] of Object.entries(i.toolUseTracker))
      l._toolUseTracker.addToolUse(u.get(R), O);
    if (i.currentAgentSpan) {
      i.trace || E.warn("Trace is not set, skipping tracing setup");
      const R = Ae().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((x = i.trace) == null ? void 0 : x.group_id) ?? void 0,
        metadata: (b = i.trace) == null ? void 0 : b.metadata
      });
      l._currentAgentSpan = ja(R, i.currentAgentSpan), l._trace = R;
    }
    return l._noActiveAgentRun = i.noActiveAgentRun, l._inputGuardrailResults = i.inputGuardrailResults, l._outputGuardrailResults = i.outputGuardrailResults.map((R) => ({
      ...R,
      agent: u.get(R.agent.name)
    })), l._currentStep = i.currentStep, l._originalInput = i.originalInput, l._modelResponses = i.modelResponses.map(Zs), l._lastTurnResponse = i.lastModelResponse ? Zs(i.lastModelResponse) : void 0, l._generatedItems = i.generatedItems.map((R) => $a(R, u)), l._lastProcessedResponse = i.lastProcessedResponse ? await qu(u, l._currentAgent, l._context, i.lastProcessedResponse) : void 0, ((v = i.currentStep) == null ? void 0 : v.type) === "next_step_handoff" && (l._currentStep = {
      type: "next_step_handoff",
      newAgent: u.get(i.currentStep.newAgent.name)
    }), l;
  }
}
function Uu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof ft ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function ja(n, e) {
  const t = e.span_data, r = e.previous_span ? ja(n, e.previous_span) : void 0, s = Ae().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function Zs(n) {
  const e = new Yn();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => Ur.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function $a(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Xn(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new ot(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new $t(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new qr(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new Jr(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Br(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new ge(n.rawItem, e.get(n.agent.name));
  }
}
async function qu(n, e, t, r) {
  const s = await e.getAllTools(t), a = new Map(s.filter((d) => d.type === "function").map((d) => [d.name, d])), i = new Map(s.filter((d) => d.type === "computer").map((d) => [d.name, d])), u = new Map(e.handoffs.map((d) => d instanceof ft ? [d.name, wa(d)] : [d.toolName, d])), p = {
    newItems: r.newItems.map((d) => $a(d, n)),
    toolsUsed: r.toolsUsed,
    handoffs: r.handoffs.map((d) => {
      if (!u.has(d.handoff.toolName))
        throw new Q(`Handoff ${d.handoff.toolName} not found`);
      return {
        toolCall: d.toolCall,
        handoff: u.get(d.handoff.toolName)
      };
    }),
    functions: await Promise.all(r.functions.map(async (d) => {
      if (!a.has(d.tool.name))
        throw new Q(`Tool ${d.tool.name} not found`);
      return {
        toolCall: d.toolCall,
        tool: a.get(d.tool.name)
      };
    })),
    computerActions: r.computerActions.map((d) => {
      const l = d.computer.name;
      if (!i.has(l))
        throw new Q(`Computer tool ${l} not found`);
      return {
        toolCall: d.toolCall,
        computer: i.get(l)
      };
    }),
    mcpApprovalRequests: (r.mcpApprovalRequests ?? []).map((d) => ({
      requestItem: new ge(d.requestItem.rawItem, e),
      mcpTool: d.mcpTool
    }))
  };
  return {
    ...p,
    hasToolsOrApprovalsToRun() {
      return p.handoffs.length > 0 || p.functions.length > 0 || p.mcpApprovalRequests.length > 0 || p.computerActions.length > 0;
    }
  };
}
const Us = 10;
function qs(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function Kt(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return typeof n == "string" && (n = [{ type: "message", role: "user", content: n }]), [...n, ...t];
}
var ae, kr, Ar, Cr, Fa, Er;
class Ju extends nu {
  constructor(t = {}) {
    super();
    T(this, ae);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? ou(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(Es), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(Tr);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof We && r._trace ? $o(r._trace, async () => (r._currentAgentSpan && Tn(r._currentAgentSpan), s != null && s.stream ? F(this, ae, Er).call(this, t, r, s) : F(this, ae, kr).call(this, t, r, s))) : Fo(async () => s != null && s.stream ? F(this, ae, Er).call(this, t, r, s) : F(this, ae, kr).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
ae = new WeakSet(), kr = async function(t, r, s) {
  return br(async () => {
    var i, u;
    const a = r instanceof We ? r : new We(s.context instanceof vt ? s.context : new vt(s.context), r, t, s.maxTurns ?? Us);
    try {
      for (; ; ) {
        const p = a._currentAgent.model !== void 0 && a._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let d = Js(a._currentAgent.model, this.config.model);
        if (typeof d == "string" && (d = await this.config.modelProvider.getModel(d)), a._currentStep = a._currentStep ?? {
          type: "next_step_run_again"
        }, a._currentStep.type === "next_step_interruption") {
          if (E.debug("Continuing from interruption"), !a._lastTurnResponse || !a._lastProcessedResponse)
            throw new Q("No model response found in previous state", a);
          const l = await Ps(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          if (a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = l.originalInput, a._generatedItems = l.generatedItems, a._currentStep = l.nextStep, l.nextStep.type === "next_step_interruption")
            return new cr(a);
          continue;
        }
        if (a._currentStep.type === "next_step_run_again") {
          const l = [];
          if (a._currentAgent.handoffs && l.push(...a._currentAgent.handoffs.map(qn)), !a._currentAgentSpan) {
            const q = l.map((L) => L.agentName);
            a._currentAgentSpan = ks({
              data: {
                name: a._currentAgent.name,
                handoffs: q,
                output_type: a._currentAgent.outputSchemaName
              }
            }), a._currentAgentSpan.start(), Tn(a._currentAgentSpan);
          }
          const f = await a._currentAgent.getAllTools(a._context), h = f.map((q) => Os(q)), x = l.map((q) => Rs(q));
          if (a._currentAgentSpan && (a._currentAgentSpan.spanData.tools = f.map((q) => q.name)), a._currentTurn++, a._currentTurn > a._maxTurns)
            throw (i = a._currentAgentSpan) == null || i.setError({
              message: "Max turns exceeded",
              data: { max_turns: a._maxTurns }
            }), new hs(`Max turns (${a._maxTurns}) exceeded`, a);
          E.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`), a._currentTurn === 1 && await F(this, ae, Ar).call(this, a);
          const b = Kt(a._originalInput, a._generatedItems);
          a._noActiveAgentRun && (a._currentAgent.emit("agent_start", a._context, a._currentAgent), this.emit("agent_start", a._context, a._currentAgent));
          let v = {
            ...this.config.modelSettings,
            ...a._currentAgent.modelSettings
          };
          const R = a._currentAgent.modelSettings;
          v = Bs(p, R, d, v), v = Ds(a._currentAgent, a._toolUseTracker, v), a._lastTurnResponse = await d.getResponse({
            systemInstructions: await a._currentAgent.getSystemPrompt(a._context),
            prompt: await a._currentAgent.getPrompt(a._context),
            input: b,
            previousResponseId: s.previousResponseId,
            conversationId: s.conversationId,
            modelSettings: v,
            tools: h,
            outputType: _s(a._currentAgent.outputType),
            handoffs: x,
            tracing: qs(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), a._modelResponses.push(a._lastTurnResponse), a._context.usage.add(a._lastTurnResponse.usage), a._noActiveAgentRun = !1;
          const O = Ns(a._lastTurnResponse, a._currentAgent, f, l);
          a._lastProcessedResponse = O;
          const M = await Ms(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = M.originalInput, a._generatedItems = M.generatedItems, a._currentStep = M.nextStep;
        }
        if (a._currentStep && a._currentStep.type === "next_step_final_output")
          return await F(this, ae, Cr).call(this, a, a._currentStep.output), this.emit("agent_end", a._context, a._currentAgent, a._currentStep.output), a._currentAgent.emit("agent_end", a._context, a._currentStep.output), new cr(a);
        if (a._currentStep && a._currentStep.type === "next_step_handoff")
          a._currentAgent = a._currentStep.newAgent, a._currentAgentSpan && (a._currentAgentSpan.end(), Ut(), a._currentAgentSpan = void 0), a._noActiveAgentRun = !0, a._currentStep = { type: "next_step_run_again" };
        else {
          if (a._currentStep && a._currentStep.type === "next_step_interruption")
            return new cr(a);
          E.debug("Running next loop");
        }
      }
    } catch (p) {
      throw a._currentAgentSpan && a._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(p) }
      }), p;
    } finally {
      a._currentAgentSpan && (((u = a._currentStep) == null ? void 0 : u.type) !== "next_step_interruption" && a._currentAgentSpan.end(), Ut());
    }
  });
}, Ar = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Es));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => Cs(async (u) => {
        const p = await i.run(s);
        return u.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new gs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof gs ? a : (t._currentTurn--, new ms(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, Cr = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Tr));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const u = await Promise.all(s.map(async (p) => Cs(async (d) => {
        const l = await p.run(i);
        return d.spanData.triggered = l.output.tripwireTriggered, l;
      }, { data: { name: p.name } }, t._currentAgentSpan)));
      for (const p of u)
        if (p.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: p.guardrail.name }
          }), new vr(`Output guardrail triggered: ${JSON.stringify(p.output.outputInfo)}`, p, t);
    } catch (u) {
      throw u instanceof vr ? u : new ms(`Output guardrail failed to complete: ${u}`, u, t);
    }
  }
}, Fa = async function(t, r) {
  var s, a, i;
  try {
    for (; ; ) {
      const u = t.state._currentAgent, p = u.handoffs.map(qn), d = await u.getAllTools(t.state._context), l = d.map((h) => Os(h)), f = p.map((h) => Rs(h));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (E.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new Q("No model response found in previous state", t.state);
        const h = await Ps(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if (js(t, h), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = h.originalInput, t.state._generatedItems = h.generatedItems, t.state._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const L = p.map((V) => V.agentName);
          t.state._currentAgentSpan = ks({
            data: {
              name: u.name,
              handoffs: L,
              tools: d.map((V) => V.name),
              output_type: u.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), Tn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (s = t.state._currentAgentSpan) == null || s.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new hs(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        E.debug(`Running agent ${u.name} (turn ${t.state._currentTurn})`);
        const h = u.model !== void 0 && u.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let x = Js(u.model, this.config.model);
        typeof x == "string" && (x = await this.config.modelProvider.getModel(x)), t.state._currentTurn === 1 && await F(this, ae, Ar).call(this, t.state);
        let b = {
          ...this.config.modelSettings,
          ...u.modelSettings
        };
        const v = u.modelSettings;
        b = Bs(h, v, x, b), b = Ds(u, t.state._toolUseTracker, b);
        const R = Kt(t.input, t.newItems);
        t.state._noActiveAgentRun && (u.emit("agent_start", t.state._context, u), this.emit("agent_start", t.state._context, u));
        let O;
        for await (const L of x.getStreamedResponse({
          systemInstructions: await u.getSystemPrompt(t.state._context),
          prompt: await u.getPrompt(t.state._context),
          input: R,
          previousResponseId: r.previousResponseId,
          conversationId: r.conversationId,
          modelSettings: b,
          tools: l,
          handoffs: f,
          outputType: _s(u.outputType),
          tracing: qs(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (L.type === "response_done") {
            const V = Aa.parse(L);
            O = {
              usage: new Yn(V.response.usage),
              output: V.response.output,
              responseId: V.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new Cu(L));
        }
        if (t.state._noActiveAgentRun = !1, !O)
          throw new me("Model did not produce a final response!", t.state);
        t.state._lastTurnResponse = O, t.state._modelResponses.push(t.state._lastTurnResponse);
        const M = Ns(t.state._lastTurnResponse, u, d, p);
        t.state._lastProcessedResponse = M;
        const q = await Ms(u, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        js(t, q), t.state._toolUseTracker.addToolUse(u, M.toolsUsed), t.state._originalInput = q.originalInput, t.state._generatedItems = q.generatedItems, t.state._currentStep = q.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await F(this, ae, Cr).call(this, t.state, t.state._currentStep.output), this.emit("agent_end", t.state._context, u, t.state._currentStep.output), u.emit("agent_end", t.state._context, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (a = t.state._currentStep) == null ? void 0 : a.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Ut()), t.state._currentAgentSpan = void 0, t._addItem(new Ou(t.state._currentAgent)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : E.debug("Running next loop");
      }
    }
  } catch (u) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(u) }
    }), u;
  } finally {
    t.state._currentAgentSpan && (((i = t.state._currentStep) == null ? void 0 : i.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Ut());
  }
}, Er = async function(t, r, s) {
  return s = s ?? {}, br(async () => {
    const a = r instanceof We ? r : new We(s.context instanceof vt ? s.context : new vt(s.context), r, t, s.maxTurns ?? Us), i = new ku({
      signal: s.signal,
      state: a
    });
    return i.maxTurns = s.maxTurns ?? a._maxTurns, F(this, ae, Fa).call(this, i, s).then(() => {
      i._done();
    }, (u) => {
      i._raiseError(u);
    }), i;
  });
};
function Js(n, e) {
  return typeof n == "string" && n !== ft.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? ft.DEFAULT_MODEL_PLACEHOLDER;
}
function Bs(n, e, t, r) {
  var s, a, i, u, p, d, l, f;
  return (
    // gpt-5 is enabled for the default model for agents
    ga() && // explicitly set model for the agent
    n && // this runner uses a non-gpt-5 model
    (typeof t != "string" || !Hn(t)) && ((s = e.providerData) != null && s.reasoning || (i = (a = e.providerData) == null ? void 0 : a.text) != null && i.verbosity || (u = e.providerData) != null && u.reasoning_effort) && ((p = r.providerData) == null || delete p.reasoning, (l = (d = r.providerData) == null ? void 0 : d.text) == null || delete l.verbosity, (f = r.providerData) == null || delete f.reasoning_effort), r
  );
}
const Or = /* @__PURE__ */ new WeakMap();
function Bu(n, e) {
  n && Or.set(n, e);
}
function Gu(n) {
  const e = Or.get(n);
  return e && Or.delete(n), e;
}
const zu = m({ input: c() }), wt = class wt extends tu {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "prompt");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new Q("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? wt.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? su(), this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, // The user sets a non-default model
    t.model !== void 0 && // The default model is gpt-5
    ga() && // However, the specified model is not a gpt-5 model
    (typeof t.model != "string" || !Hn(t.model)) && // The model settings are not customized for the specified model
    t.modelSettings === void 0 && (this.modelSettings = {}), (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new wt({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (pt(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new wt({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a, needsApproval: i } = t;
    return wr({
      name: r ?? Un(this.name),
      description: s ?? "",
      parameters: zu,
      strict: !0,
      needsApproval: i,
      execute: async (u, p, d) => {
        if (!_o(u))
          throw new me("Agent tool called with invalid input");
        const f = await new Ju().run(this, u.input, { context: p }), h = typeof a == "function" ? await a(f) : Au(f.rawResponses[f.rawResponses.length - 1]);
        return d != null && d.toolCall && Bu(d.toolCall, f), h;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(t) {
    return this.mcpServers.length > 0 ? Co({
      mcpServers: this.mcpServers,
      runContext: t,
      agent: this,
      convertSchemasToStrict: !1
    }) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(t) {
    return [...await this.getMcpTools(t), ...this.tools];
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return pt(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
_(wt, "DEFAULT_MODEL_PLACEHOLDER", "");
let ft = wt;
eu(fa());
function La(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function Za(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Ua(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "output_text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "output_audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Vu(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function Wu() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function Gs(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "output_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function zs(n, e, t) {
  if (e.type === "conversation.item.input_audio_transcription.completed")
    return n.map((a) => {
      if (a.itemId === e.item_id && a.type === "message" && "role" in a && a.role === "user") {
        const i = a.content.map((u) => u.type === "input_audio" ? {
          ...u,
          transcript: e.transcript
        } : u);
        return {
          ...a,
          content: i,
          status: "completed"
        };
      }
      return a;
    });
  const r = !t && e.type === "message" ? Gs(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? Gs(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Hu = {
  "User-Agent": `Agents/JavaScript ${dr.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${dr.version}`
}, Ku = `openai-agents-sdk.${dr.version}`;
function Yu(n, e) {
  const { name: t, arguments: r, ...s } = e;
  return new ge({
    type: "hosted_tool_call",
    name: t,
    arguments: JSON.stringify(r),
    status: "in_progress",
    providerData: {
      ...s
    }
  }, n);
}
function Vs(n) {
  const { name: e, arguments: t, providerData: r } = n.rawItem, { itemId: s, serverLabel: a, ...i } = r ?? {};
  if (!s || !a)
    throw new Error("Invalid approval item for Realtime MCP approval request");
  return {
    type: "mcp_approval_request",
    itemId: s,
    serverLabel: a,
    ...i,
    name: e,
    arguments: t ? JSON.parse(t) : {},
    approved: null
  };
}
class pd extends ft {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice;
  }
}
function Xu(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function Qu({ policyHint: n, ...e }) {
  const t = Tr(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function ec(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
const he = da("openai-agents:realtime");
function $e(n, e) {
  return n in e && typeof e[n] < "u";
}
function tc(n) {
  return $e("modalities", n) || $e("voice", n) || $e("inputAudioFormat", n) || $e("outputAudioFormat", n) || $e("inputAudioTranscription", n) || $e("turnDetection", n) || $e("inputAudioNoiseReduction", n) || $e("speed", n);
}
function nc(n) {
  return tc(n) ? {
    model: n.model,
    instructions: n.instructions,
    toolChoice: n.toolChoice,
    tools: n.tools,
    tracing: n.tracing,
    providerData: n.providerData,
    prompt: n.prompt,
    outputModalities: n.modalities,
    audio: {
      input: {
        format: Sn(n.inputAudioFormat),
        noiseReduction: n.inputAudioNoiseReduction ?? null,
        transcription: n.inputAudioTranscription,
        turnDetection: n.turnDetection
      },
      output: {
        format: Sn(n.outputAudioFormat),
        voice: n.voice,
        speed: n.speed
      }
    }
  } : {
    model: n.model,
    instructions: n.instructions,
    toolChoice: n.toolChoice,
    tools: n.tools,
    tracing: n.tracing,
    providerData: n.providerData,
    prompt: n.prompt,
    outputModalities: n.outputModalities,
    audio: n.audio ? {
      input: n.audio.input ? {
        format: Sn(n.audio.input.format),
        noiseReduction: n.audio.input.noiseReduction ?? null,
        transcription: n.audio.input.transcription,
        turnDetection: n.audio.input.turnDetection
      } : void 0,
      output: n.audio.output ? {
        format: Sn(n.audio.output.format),
        voice: n.audio.output.voice,
        speed: n.audio.output.speed
      } : void 0
    } : void 0
  };
}
function Sn(n) {
  if (!n)
    return;
  if (typeof n == "object")
    return n;
  const e = String(n);
  return e === "pcm16" ? { type: "audio/pcm", rate: 24e3 } : e === "g711_ulaw" ? { type: "audio/pcmu" } : e === "g711_alaw" ? { type: "audio/pcma" } : { type: "audio/pcm", rate: 24e3 };
}
m({
  itemId: c()
});
const Ws = le("role", [
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("system"),
    content: J(m({ type: g("input_text"), text: c() }))
  }),
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("user"),
    status: re(["in_progress", "completed"]),
    content: J(m({ type: g("input_text"), text: c() }).or(m({
      type: g("input_audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable()
    })))
  }),
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("assistant"),
    status: re(["in_progress", "completed", "incomplete"]),
    content: J(m({ type: g("output_text"), text: c() }).or(m({
      type: g("output_audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable().optional()
    })))
  })
]), Hs = m({
  itemId: c(),
  previousItemId: c().nullable().optional(),
  type: g("function_call"),
  status: re(["in_progress", "completed", "incomplete"]),
  arguments: c(),
  name: c(),
  output: c().nullable()
}), Ks = m({
  itemId: c(),
  previousItemId: c().nullable().optional(),
  type: re(["mcp_call", "mcp_tool_call"]),
  status: re(["in_progress", "completed", "incomplete"]),
  arguments: c(),
  name: c(),
  output: c().nullable()
}), rc = m({
  itemId: c(),
  type: g("mcp_approval_request"),
  serverLabel: c(),
  name: c(),
  arguments: X(c(), Z()),
  approved: it().optional().nullable()
}), qa = m({
  id: c().optional().nullable(),
  conversation_id: c().optional().nullable(),
  max_output_tokens: A().or(g("inf")).optional().nullable(),
  metadata: X(c(), Z()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: J(c()).optional().nullable(),
  object: g("realtime.response").optional().nullable(),
  output: J(Z()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: m({
    output: m({
      format: Z().optional().nullable(),
      voice: c().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: re(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: X(c(), Z()).optional().nullable(),
  usage: m({
    input_tokens: A().optional(),
    input_tokens_details: X(c(), Z()).optional().nullable(),
    output_tokens: A().optional(),
    output_tokens_details: X(c(), Z()).optional().nullable()
  }).optional().nullable()
}), sc = m({
  id: c().optional(),
  audio: c().nullable().optional(),
  text: c().nullable().optional(),
  transcript: c().nullable().optional(),
  type: na([
    g("input_text"),
    g("input_audio"),
    g("item_reference"),
    g("output_text"),
    g("output_audio")
  ])
}), Ft = m({
  id: c().optional(),
  arguments: c().optional(),
  call_id: c().optional(),
  content: J(sc).optional(),
  name: c().optional(),
  output: c().nullable().optional(),
  role: re(["user", "assistant", "system"]).optional(),
  status: re(["completed", "incomplete", "in_progress"]).optional(),
  type: re([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: c().nullable().optional(),
  approve: it().nullable().optional(),
  reason: c().nullable().optional(),
  server_label: c().optional(),
  error: Z().nullable().optional(),
  tools: J(m({
    name: c(),
    description: c(),
    input_schema: X(Z()).optional()
  }).passthrough()).optional()
}).passthrough(), ac = m({
  type: g("conversation.created"),
  event_id: c(),
  conversation: m({
    id: c().optional(),
    object: g("realtime.conversation").optional()
  })
}), ic = m({
  type: g("conversation.item.added"),
  event_id: c(),
  item: Ft,
  previous_item_id: c().nullable().optional()
}), oc = m({
  type: g("conversation.item.done"),
  event_id: c(),
  item: Ft,
  previous_item_id: c().nullable().optional()
}), uc = m({
  type: g("conversation.item.deleted"),
  event_id: c(),
  item_id: c()
}), cc = m({
  type: g("conversation.item.input_audio_transcription.completed"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  transcript: c(),
  logprobs: J(Z()).nullable().optional()
}), dc = m({
  type: g("conversation.item.input_audio_transcription.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A().optional(),
  delta: c().optional(),
  logprobs: J(Z()).nullable().optional()
}), lc = m({
  type: g("conversation.item.input_audio_transcription.failed"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  error: m({
    code: c().optional(),
    message: c().optional(),
    param: c().optional(),
    type: c().optional()
  })
}), pc = m({
  type: g("conversation.item.retrieved"),
  event_id: c(),
  item: Ft
}), fc = m({
  type: g("conversation.item.truncated"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: A(),
  content_index: A()
}), hc = m({
  type: g("conversation.item.create"),
  item: Ft,
  event_id: c().optional(),
  previous_item_id: c().nullable().optional()
}), mc = m({
  type: g("conversation.item.delete"),
  item_id: c(),
  event_id: c().optional()
}), gc = m({
  type: g("conversation.item.retrieve"),
  item_id: c(),
  event_id: c().optional()
}), _c = m({
  type: g("conversation.item.truncate"),
  item_id: c(),
  audio_end_ms: A(),
  content_index: A(),
  event_id: c().optional()
}), yc = m({
  type: g("error"),
  event_id: c().optional(),
  error: Z().optional()
}), vc = m({
  type: g("input_audio_buffer.cleared"),
  event_id: c()
}), wc = m({
  type: g("input_audio_buffer.append"),
  audio: c(),
  event_id: c().optional()
}), bc = m({
  type: g("input_audio_buffer.clear"),
  event_id: c().optional()
}), xc = m({
  type: g("input_audio_buffer.commit"),
  event_id: c().optional()
}), Sc = m({
  type: g("input_audio_buffer.committed"),
  event_id: c(),
  item_id: c(),
  previous_item_id: c().nullable().optional()
}), Tc = m({
  type: g("input_audio_buffer.speech_started"),
  event_id: c(),
  item_id: c(),
  audio_start_ms: A()
}), Ic = m({
  type: g("input_audio_buffer.speech_stopped"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: A()
}), kc = m({
  type: g("output_audio_buffer.started"),
  event_id: c()
}).passthrough(), Ac = m({
  type: g("output_audio_buffer.stopped"),
  event_id: c()
}).passthrough(), Cc = m({
  type: g("output_audio_buffer.cleared"),
  event_id: c()
}), Ec = m({
  type: g("rate_limits.updated"),
  event_id: c(),
  rate_limits: J(m({
    limit: A().optional(),
    name: re(["requests", "tokens"]).optional(),
    remaining: A().optional(),
    reset_seconds: A().optional()
  }))
}), Oc = m({
  type: g("response.output_audio.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Rc = m({
  type: g("response.output_audio.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c()
}), Nc = m({
  type: g("response.output_audio_transcript.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Dc = m({
  //  GA may introduce response.output_audio_transcript.done
  type: g("response.output_audio_transcript.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  transcript: c(),
  output_index: A(),
  response_id: c()
}), Pc = m({
  type: g("response.content_part.added"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c(),
  part: m({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: re(["text", "audio"]).optional()
  })
}), Mc = m({
  type: g("response.content_part.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c(),
  part: m({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: re(["text", "audio"]).optional()
  })
}), jc = m({
  type: g("response.created"),
  event_id: c(),
  response: qa
}), Ja = m({
  type: g("response.done"),
  event_id: c(),
  response: qa
}), $c = m({
  type: g("response.function_call_arguments.delta"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Fc = m({
  type: g("response.function_call_arguments.done"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  arguments: c(),
  output_index: A(),
  response_id: c()
}), Lc = m({
  type: g("response.output_item.added"),
  event_id: c(),
  item: Ft,
  output_index: A(),
  response_id: c()
}), Zc = m({
  type: g("response.output_item.done"),
  event_id: c(),
  item: Ft,
  output_index: A(),
  response_id: c()
}), Uc = m({
  type: g("response.output_text.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), qc = m({
  // No rename specified for done; keep response.text.done
  type: g("response.output_text.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  text: c(),
  output_index: A(),
  response_id: c()
}), Jc = m({
  type: g("session.created"),
  event_id: c(),
  session: Z()
}), Bc = m({
  type: g("session.updated"),
  event_id: c(),
  session: Z()
}), Gc = m({
  type: g("response.cancel"),
  event_id: c().optional(),
  response_id: c().optional()
}), zc = m({
  type: g("response.create"),
  event_id: c().optional(),
  response: Z().optional()
}), Vc = m({
  type: g("session.update"),
  event_id: c().optional(),
  session: Z()
}), Wc = m({
  type: g("mcp_list_tools.in_progress"),
  event_id: c().optional(),
  item_id: c().optional()
}), Hc = m({
  type: g("mcp_list_tools.completed"),
  event_id: c().optional(),
  item_id: c().optional()
}), Kc = m({
  type: g("response.mcp_call_arguments.delta"),
  event_id: c(),
  response_id: c(),
  item_id: c(),
  output_index: A(),
  delta: c(),
  obfuscation: c()
}), Yc = m({
  type: g("response.mcp_call_arguments.done"),
  event_id: c(),
  response_id: c(),
  item_id: c(),
  output_index: A(),
  arguments: c()
}), Xc = m({
  type: g("response.mcp_call.in_progress"),
  event_id: c(),
  output_index: A(),
  item_id: c()
}), Qc = m({
  type: g("response.mcp_call.completed"),
  event_id: c(),
  output_index: A(),
  item_id: c()
}), ed = m({
  type: g("mcp_list_tools.failed"),
  event_id: c().optional(),
  item_id: c().optional()
}), td = m({
  type: c(),
  event_id: c().optional().nullable()
}).passthrough(), nd = le("type", [
  ac,
  ic,
  oc,
  uc,
  cc,
  dc,
  lc,
  pc,
  fc,
  yc,
  vc,
  Sc,
  Tc,
  Ic,
  kc,
  Ac,
  Cc,
  Ec,
  Oc,
  Rc,
  Nc,
  Dc,
  Pc,
  Mc,
  jc,
  Ja,
  $c,
  Fc,
  Lc,
  Zc,
  Uc,
  qc,
  Jc,
  Bc,
  Wc,
  Hc,
  ed,
  Kc,
  Yc,
  Xc,
  Qc
]);
le("type", [
  hc,
  mc,
  gc,
  _c,
  wc,
  bc,
  xc,
  Gc,
  zc,
  Vc
]);
function Gr(n) {
  const e = JSON.parse(n.data.toString()), t = nd.safeParse(e);
  if (!t.success) {
    const r = td.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const rd = "gpt-realtime", Ce = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var Qe, dn, oe, ln;
const Wr = class Wr extends $r {
  constructor(t = {}) {
    super();
    T(this, Qe);
    T(this, dn);
    T(this, oe, null);
    T(this, ln, null);
    _(this, "eventEmitter", new Vn());
    y(this, Qe, t.model ?? rd), y(this, dn, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return o(this, Qe);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    y(this, Qe, t);
  }
  get _rawSessionConfig() {
    return o(this, ln) ?? null;
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? o(this, dn);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, u, p, d, l;
    const { data: r, isGeneric: s } = Gr(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "session.updated" && y(this, ln, r.session), r.type === "response.done") {
        const f = Ja.safeParse(r);
        if (!f.success) {
          he.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, x = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, b = h + x, v = new Yn({
          inputTokens: h,
          inputTokensDetails: ((u = f.data.response.usage) == null ? void 0 : u.input_tokens_details) ?? {},
          outputTokens: x,
          outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_tokens_details) ?? {},
          totalTokens: b
        });
        this.emit("usage_update", v), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((d = f.data.response.usage) == null ? void 0 : d.input_tokens_details) ?? {},
              outputTokens: x,
              outputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.output_tokens_details) ?? {},
              totalTokens: b
            }
          }
        });
        return;
      }
      if (r.type === "response.output_audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.output_text.delta" || r.type === "response.output_audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.output_audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if (r.type === "conversation.item.added" || r.type === "conversation.item.done" || r.type === "conversation.item.retrieved") {
        if (r.item.type === "mcp_list_tools" && r.type === "conversation.item.done") {
          const f = r.item.server_label ?? "", h = r.item.tools ?? [];
          try {
            this.emit("mcp_tools_listed", {
              serverLabel: f,
              tools: h
            });
          } catch (x) {
            he.error("Error emitting mcp_tools_listed", x, r.item);
          }
          return;
        }
        if (r.item.type === "message") {
          const f = r.type === "conversation.item.added" || r.type === "conversation.item.done" ? r.previous_item_id : null, h = Ws.parse({
            itemId: r.item.id,
            previousItemId: f,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.item.status
          });
          this.emit("item_update", h);
          return;
        }
        if (r.item.type === "mcp_approval_request" && r.type === "conversation.item.done") {
          const f = r.item, h = rc.parse({
            itemId: f.id,
            type: f.type,
            serverLabel: f.server_label,
            name: f.name,
            arguments: JSON.parse(f.arguments || "{}"),
            approved: f.approved
          });
          this.emit("item_update", h), this.emit("mcp_approval_request", h);
          return;
        }
        if (r.item.type === "mcp_tool_call" || r.item.type === "mcp_call") {
          const f = r.type === "conversation.item.done" ? "completed" : "in_progress", h = Ks.parse({
            itemId: r.item.id,
            type: r.item.type,
            status: f,
            arguments: r.item.arguments,
            name: r.item.name,
            output: r.item.output
          });
          this.emit("item_update", h), r.type === "conversation.item.done" && this.emit("mcp_tool_call_completed", h);
          return;
        }
      }
      if (r.type === "response.mcp_call.in_progress") {
        const f = r;
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "mcp_list_tools.in_progress") {
        const f = r;
        f.item_id && this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = Hs.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "mcp_tool_call" || f.type === "mcp_call") {
          const h = Ks.parse({
            itemId: f.id,
            type: f.type,
            status: r.type === "response.output_item.done" ? "completed" : "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: f.output
          });
          this.emit("item_update", h);
          return;
        }
        if (f.type === "message") {
          const h = Ws.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.type === "response.output_item.done" ? f.status ?? "completed" : f.status ?? "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r, { triggerResponse: s = !0 } = {}) {
    const a = typeof t == "string" ? [
      {
        type: "input_text",
        text: t
      }
    ] : t.content.map((i) => i.type === "input_image" ? {
      type: "input_image",
      image_url: i.image,
      ...i.providerData ?? {}
    } : i);
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content: a
      },
      ...r
    }), s && this.sendEvent({
      type: "response.create"
    });
  }
  addImage(t, { triggerResponse: r = !0 } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image: t }]
    }, {}, { triggerResponse: r });
  }
  _getMergedSessionConfig(t) {
    var a, i, u, p, d, l, f, h, x, b, v, R, O, M, q, L, V, pe, ye, gt, Lt, wn, Hr, Kr, Yr, Xr, Qr, es;
    const r = nc(t), s = {
      type: "realtime",
      instructions: r.instructions,
      model: r.model ?? o(this, Qe),
      output_modalities: r.outputModalities ?? Ce.outputModalities,
      audio: {
        input: {
          format: ((i = (a = r.audio) == null ? void 0 : a.input) == null ? void 0 : i.format) ?? ((p = (u = Ce.audio) == null ? void 0 : u.input) == null ? void 0 : p.format),
          noise_reduction: ((l = (d = r.audio) == null ? void 0 : d.input) == null ? void 0 : l.noiseReduction) ?? ((h = (f = Ce.audio) == null ? void 0 : f.input) == null ? void 0 : h.noiseReduction),
          transcription: ((b = (x = r.audio) == null ? void 0 : x.input) == null ? void 0 : b.transcription) ?? ((R = (v = Ce.audio) == null ? void 0 : v.input) == null ? void 0 : R.transcription),
          turn_detection: Wr.buildTurnDetectionConfig((M = (O = r.audio) == null ? void 0 : O.input) == null ? void 0 : M.turnDetection) ?? ((L = (q = Ce.audio) == null ? void 0 : q.input) == null ? void 0 : L.turnDetection)
        },
        output: {
          format: ((pe = (V = r.audio) == null ? void 0 : V.output) == null ? void 0 : pe.format) ?? ((gt = (ye = Ce.audio) == null ? void 0 : ye.output) == null ? void 0 : gt.format),
          voice: ((wn = (Lt = r.audio) == null ? void 0 : Lt.output) == null ? void 0 : wn.voice) ?? ((Kr = (Hr = Ce.audio) == null ? void 0 : Hr.output) == null ? void 0 : Kr.voice),
          speed: ((Xr = (Yr = r.audio) == null ? void 0 : Yr.output) == null ? void 0 : Xr.speed) ?? ((es = (Qr = Ce.audio) == null ? void 0 : Qr.output) == null ? void 0 : es.speed)
        }
      },
      tool_choice: r.toolChoice ?? Ce.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...r.providerData ?? {}
    };
    return r.prompt && (s.prompt = {
      id: r.prompt.promptId,
      version: r.prompt.version,
      variables: r.prompt.variables
    }), r.tools && r.tools.length > 0 && (s.tools = r.tools.map((Ha) => ({
      ...Ha,
      strict: void 0
    }))), s;
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: u, interrupt_response: p, prefixPaddingMs: d, prefix_padding_ms: l, silenceDurationMs: f, silence_duration_ms: h, threshold: x, idleTimeoutMs: b, idle_timeout_ms: v, ...R } = t, O = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: u || p,
      prefix_padding_ms: d || l,
      silence_duration_ms: f || h,
      idle_timeout_ms: b || v,
      threshold: x,
      ...R
    };
    return Object.keys(O).forEach((M) => {
      O[M] === void 0 && delete O[M];
    }), Object.keys(O).length > 0 ? O : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    y(this, oe, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof o(this, oe) > "u" && y(this, oe, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (o(this, oe) !== null && typeof o(this, oe) != "string" && typeof t != "string") {
      he.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      he.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (o(this, oe) === null || typeof o(this, oe) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = o(this, oe)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = o(this, oe)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = o(this, oe)) == null ? void 0 : a.workflow_name)) {
      he.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(o(this, oe)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Hs.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      he.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: Za(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Vu(t, r), u = new Set(s.map((d) => d.itemId));
    for (const d of i)
      u.add(d.itemId);
    if (u.size > 0)
      for (const d of u)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: d
        });
    const p = [...a, ...i];
    for (const d of p)
      if (d.type === "message") {
        const l = {
          type: "message",
          role: d.role,
          content: d.content,
          id: d.itemId
        };
        d.role !== "system" && d.status && (l.status = d.status), this.sendEvent({
          type: "conversation.item.create",
          item: l
        });
      } else d.type === "function_call" && he.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
  sendMcpResponse(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: t.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: t.itemId,
        approve: r
      }
    });
  }
};
Qe = new WeakMap(), dn = new WeakMap(), oe = new WeakMap(), ln = new WeakMap();
let Bn = Wr;
var pn, H, fn, et, hn;
class sd extends Bn {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    T(this, pn);
    T(this, H, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    });
    T(this, fn);
    T(this, et, !1);
    T(this, hn, !1);
    this.options = t, y(this, pn, t.baseUrl ?? "https://api.openai.com/v1/realtime/calls"), y(this, fn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return o(this, H).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return o(this, H);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return o(this, hn);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (o(this, H).status === "connected")
      return;
    o(this, H).status === "connecting" && he.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? o(this, pn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!o(this, fn) && !i)
      throw new Q("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    return new Promise(async (u, p) => {
      try {
        const d = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, l = new URL(s);
        let f = new RTCPeerConnection();
        const h = f.createDataChannel("oai-events");
        y(this, H, {
          status: "connecting",
          peerConnection: f,
          dataChannel: h
        }), this.emit("connection_change", o(this, H).status), h.addEventListener("open", () => {
          y(this, H, {
            status: "connected",
            peerConnection: f,
            dataChannel: h
          }), this.updateSessionConfig(d), this.emit("connection_change", o(this, H).status), this._onOpen(), u();
        }), h.addEventListener("error", (M) => {
          this.close(), this._onError(M), p(M);
        }), h.addEventListener("message", (M) => {
          this._onMessage(M);
          const { data: q, isGeneric: L } = Gr(M);
          !q || L || (q.type === "response.created" ? y(this, et, !0) : q.type === "response.done" && y(this, et, !1), q.type === "session.created" && (this._tracingConfig = q.session.tracing, this._updateTracingConfig(d.tracing ?? "auto")));
        });
        const x = this.options.audioElement ?? document.createElement("audio");
        x.autoplay = !0, f.ontrack = (M) => {
          x.srcObject = M.streams[0];
        };
        const b = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        f.addTrack(b.getAudioTracks()[0]), this.options.changePeerConnection && (f = await this.options.changePeerConnection(f), y(this, H, { ...o(this, H), peerConnection: f }));
        const v = await f.createOffer();
        if (await f.setLocalDescription(v), !v.sdp)
          throw new Error("Failed to create offer");
        const O = {
          type: "answer",
          sdp: await (await fetch(l, {
            method: "POST",
            body: v.sdp,
            headers: {
              "Content-Type": "application/sdp",
              Authorization: `Bearer ${a}`,
              "X-OpenAI-Agents-SDK": Hu["X-OpenAI-Agents-SDK"]
            }
          })).text()
        };
        await f.setRemoteDescription(O);
      } catch (d) {
        this.close(), this._onError(d), p(d);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, H).dataChannel || o(this, H).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    o(this, H).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    y(this, hn, t), o(this, H).peerConnection && o(this, H).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (o(this, H).dataChannel && o(this, H).dataChannel.close(), o(this, H).peerConnection) {
      const t = o(this, H).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    o(this, H).status !== "disconnected" && (y(this, H, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    }), this.emit("connection_change", o(this, H).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    o(this, et) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, et, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
pn = new WeakMap(), H = new WeakMap(), fn = new WeakMap(), et = new WeakMap(), hn = new WeakMap();
const ad = globalThis.WebSocket;
var tt, nt, ee, mn, Ne, rt, st, zn, Ba;
class id extends Bn {
  constructor(t = {}) {
    super(t);
    T(this, zn);
    T(this, tt);
    T(this, nt);
    T(this, ee, {
      status: "disconnected",
      websocket: void 0
    });
    T(this, mn);
    T(this, Ne);
    T(this, rt);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    T(this, st, !1);
    y(this, nt, t.url), y(this, mn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return o(this, ee).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return o(this, ee);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return o(this, Ne);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, y(this, tt, await this._getApiKey(t));
    const s = t.url ?? o(this, nt) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    y(this, nt, s);
    const a = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((i, u) => {
      try {
        F(this, zn, Ba).call(this, i, u, a);
      } catch (p) {
        u(p);
      }
    }), await this.updateSessionConfig(a);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, ee).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    o(this, ee).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = o(this, ee).websocket) == null || t.close(), y(this, Ne, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, rt, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    o(this, ee).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    o(this, st) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, st, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t, r = !0) {
    if (t < 0)
      return;
    r && this._cancelResponse();
    const s = this._audioLengthMs ?? Number.POSITIVE_INFINITY, a = Math.max(0, Math.min(Math.floor(t), s));
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: o(this, Ne),
      content_index: o(this, rt),
      audio_end_ms: a
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(t = !0) {
    if (!o(this, Ne) || typeof this._firstAudioTimestamp != "number")
      return;
    const r = Date.now() - this._firstAudioTimestamp;
    r >= 0 && this._interrupt(r, t), y(this, Ne, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, rt, void 0);
  }
}
tt = new WeakMap(), nt = new WeakMap(), ee = new WeakMap(), mn = new WeakMap(), Ne = new WeakMap(), rt = new WeakMap(), st = new WeakMap(), zn = new WeakSet(), Ba = function(t, r, s) {
  if (o(this, ee).websocket) {
    t();
    return;
  }
  if (!o(this, tt))
    throw new Q("API key is not set. Please call `connect()` with an API key first.");
  if (!o(this, tt).startsWith("ek_") && !o(this, mn))
    throw new Q("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  const a = [
    "realtime",
    // Auth
    "openai-insecure-api-key." + o(this, tt),
    // Version header
    Ku
  ], i = new ad(o(this, nt), a);
  y(this, ee, {
    status: "connecting",
    websocket: i
  }), this.emit("connection_change", o(this, ee).status), i.addEventListener("open", () => {
    y(this, ee, {
      status: "connected",
      websocket: i
    }), this.emit("connection_change", o(this, ee).status), this._onOpen(), t();
  }), i.addEventListener("error", (u) => {
    this._onError(u), y(this, ee, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, ee).status), r(u);
  }), i.addEventListener("message", (u) => {
    var l, f, h, x, b, v, R;
    this._onMessage(u);
    const { data: p, isGeneric: d } = Gr(u);
    if (!(!p || d))
      if (p.type === "response.output_audio.delta") {
        y(this, rt, p.content_index), y(this, Ne, p.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const O = La(p.delta), M = (h = (f = (l = this._rawSessionConfig) == null ? void 0 : l.audio) == null ? void 0 : f.output) == null ? void 0 : h.format;
        if (M && typeof M == "object") {
          const L = M.type;
          if (L === "audio/pcmu" || L === "audio/pcma")
            this._audioLengthMs += O.byteLength / 8;
          else if (L === "audio/pcm") {
            const V = M.rate ?? 24e3;
            this._audioLengthMs += O.byteLength / 2 / V * 1e3;
          } else
            this._audioLengthMs += O.byteLength / 24 / 2;
        } else typeof M == "string" ? M.startsWith("g711_") ? this._audioLengthMs += O.byteLength / 8 : this._audioLengthMs += O.byteLength / 24 / 2 : this._audioLengthMs += O.byteLength / 24 / 2;
        const q = {
          type: "audio",
          data: O,
          responseId: p.response_id
        };
        this._onAudio(q);
      } else if (p.type === "input_audio_buffer.speech_started") {
        const O = ((R = (v = (b = (x = this._rawSessionConfig) == null ? void 0 : x.audio) == null ? void 0 : b.input) == null ? void 0 : v.turn_detection) == null ? void 0 : R.interrupt_response) ?? !1;
        this.interrupt(!O);
      } else p.type === "response.created" ? y(this, st, !0) : p.type === "response.done" ? y(this, st, !1) : p.type === "session.created" && (this._tracingConfig = p.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), i.addEventListener("close", () => {
    y(this, ee, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, ee).status), this._onClose();
  });
};
const Ga = Symbol("backgroundResult");
function fd(n) {
  return {
    [Ga]: !0,
    content: n
  };
}
function od(n) {
  return typeof n == "object" && n !== null && Ga in n;
}
function ud(n) {
  return n.type === "function" || n.type === "hosted_tool" && n.name === "hosted_mcp";
}
function cd(n) {
  if (n.type === "function")
    return n;
  if (n.type === "hosted_tool" && n.name === "hosted_mcp") {
    const e = n.providerData.server_url && n.providerData.server_url.length > 0 ? n.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: n.providerData.server_label,
      server_url: e,
      headers: n.providerData.headers,
      allowed_tools: n.providerData.allowed_tools,
      require_approval: n.providerData.require_approval
    };
  }
  throw new Q(`Invalid tool type: ${n}`);
}
var $, N, Ot, P, Rt, Nt, gn, K, Dt, Pt, Se, _n, at, yn, vn, W, kn, An, za, Cn, Va, Rr, Wa, Nr;
class hd extends Vn {
  constructor(t, r = {}) {
    super();
    T(this, W);
    _(this, "initialAgent");
    _(this, "options");
    T(this, $);
    T(this, N);
    T(this, Ot);
    T(this, P);
    T(this, Rt, []);
    T(this, Nt);
    T(this, gn, {});
    T(this, K, []);
    T(this, Dt);
    T(this, Pt, {});
    T(this, Se, !1);
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    T(this, _n, /* @__PURE__ */ new Map());
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    T(this, at, []);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    T(this, yn, null);
    T(this, vn, !0);
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && Wu() || r.transport === "webrtc" ? y(this, $, new sd()) : r.transport === "websocket" || typeof r.transport > "u" ? y(this, $, new id()) : y(this, $, r.transport), y(this, N, t), y(this, P, new vt({
      ...r.context ?? {},
      history: o(this, K)
    })), y(this, Rt, (r.outputGuardrails ?? []).map(Qu)), y(this, Nt, Xu(r.outputGuardrailSettings ?? {})), y(this, Dt, r.historyStoreAudio ?? !1), y(this, vn, r.automaticallyTriggerResponseForMcpToolCalls ?? !0);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return o(this, $);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return o(this, N);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return o(this, P).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return o(this, P);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return o(this, $).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return o(this, K);
  }
  get availableMcpTools() {
    return o(this, at);
  }
  async updateAgent(t) {
    return o(this, N).emit("agent_handoff", o(this, P), t), this.emit("agent_handoff", o(this, P), o(this, N), t), await F(this, W, kn).call(this, t), await o(this, $).updateSessionConfig(await F(this, W, An).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await F(this, W, kn).call(this, this.initialAgent), F(this, W, Wa).call(this), await o(this, $).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: t.url,
      initialSessionConfig: await F(this, W, An).call(this, this.options.config)
    }), y(this, K, []), this.emit("history_updated", o(this, K));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(o(this, K)) : r = t, o(this, $).resetHistory(o(this, K), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    o(this, $).sendMessage(t, r);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(t, { triggerResponse: r = !0 } = {}) {
    o(this, $).addImage(t, { triggerResponse: r });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    o(this, $).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    y(this, Pt, {}), o(this, $).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    o(this, $).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    o(this, $).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    o(this, P).approveTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await F(this, W, Cn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysApprove && he.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Vs(t);
      o(this, $).sendMcpResponse(a, !0);
    } else
      throw new me(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    o(this, P).rejectTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await F(this, W, Cn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysReject && he.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Vs(t);
      o(this, $).sendMcpResponse(a, !1);
    } else
      throw new me(`Tool ${t.rawItem.name} not found`);
  }
}
$ = new WeakMap(), N = new WeakMap(), Ot = new WeakMap(), P = new WeakMap(), Rt = new WeakMap(), Nt = new WeakMap(), gn = new WeakMap(), K = new WeakMap(), Dt = new WeakMap(), Pt = new WeakMap(), Se = new WeakMap(), _n = new WeakMap(), at = new WeakMap(), yn = new WeakMap(), vn = new WeakMap(), W = new WeakSet(), kn = async function(t) {
  y(this, N, t);
  const r = o(this, N).handoffs.map(qn), s = r.map((p) => p.getHandoffAsFunctionTool()), a = (await o(this, N).getAllTools(o(this, P))).filter(ud).map(cd), i = typeof o(this, N).tools < "u" || typeof o(this, N).mcpServers < "u", u = r.length > 0;
  y(this, Ot, i || u ? [...a, ...s] : void 0), F(this, W, Nr).call(this);
}, An = async function(t = {}) {
  const r = await o(this, N).getSystemPrompt(o(this, P)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && he.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  const i = {
    ...{
      ...o(this, yn) ?? {},
      ...this.options.config ?? {},
      ...t ?? {}
    },
    instructions: r,
    voice: o(this, N).voice,
    model: this.options.model,
    tools: o(this, Ot),
    tracing: s,
    prompt: typeof o(this, N).prompt == "function" ? await o(this, N).prompt(o(this, P), o(this, N)) : o(this, N).prompt
  };
  return y(this, yn, i), i;
}, za = async function(t, r) {
  const s = await r.onInvokeHandoff(o(this, P), t.arguments);
  o(this, N).emit("agent_handoff", o(this, P), s), this.emit("agent_handoff", o(this, P), o(this, N), s), await F(this, W, kn).call(this, s), await o(this, $).updateSessionConfig(await F(this, W, An).call(this));
  const a = ya(s);
  return o(this, $).sendFunctionCallOutput(t, a, !0), s;
}, Cn = async function(t, r) {
  o(this, P).context.history = JSON.parse(JSON.stringify(o(this, K)));
  let s = t.arguments;
  if (r.parameters && (pt(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(o(this, P), s, t.callId)) {
    const p = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (p === !1) {
      this.emit("agent_tool_start", o(this, P), o(this, N), r, {
        toolCall: t
      }), o(this, N).emit("agent_tool_start", o(this, P), r, {
        toolCall: t
      });
      const d = "Tool execution was not approved.";
      o(this, $).sendFunctionCallOutput(t, d, !0), this.emit("agent_tool_end", o(this, P), o(this, N), r, d, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, P), r, d, {
        toolCall: t
      });
      return;
    } else if (typeof p > "u") {
      this.emit("tool_approval_requested", o(this, P), o(this, N), {
        type: "function_approval",
        tool: r,
        approvalItem: new ge(t, o(this, N))
      });
      return;
    }
  }
  this.emit("agent_tool_start", o(this, P), o(this, N), r, {
    toolCall: t
  }), o(this, N).emit("agent_tool_start", o(this, P), r, {
    toolCall: t
  }), o(this, P).context.history = JSON.parse(JSON.stringify(o(this, K)));
  const i = await r.invoke(o(this, P), t.arguments, {
    toolCall: t
  });
  let u;
  od(i) ? (u = Ge(i.content), o(this, $).sendFunctionCallOutput(t, u, !1)) : (u = Ge(i), o(this, $).sendFunctionCallOutput(t, u, !0)), this.emit("agent_tool_end", o(this, P), o(this, N), r, u, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, P), r, u, { toolCall: t });
}, Va = async function(t) {
  const r = new Map(o(this, N).handoffs.map(qn).map((u) => [u.toolName, u])), s = await o(this, N).getAllTools(o(this, P)), a = new Map(s.map((u) => [u.name, u])), i = r.get(t.name);
  if (i)
    await F(this, W, za).call(this, t, i);
  else {
    const u = a.get(t.name);
    if (u && u.type === "function")
      await F(this, W, Cn).call(this, t, u);
    else
      throw new me(`Tool ${t.name} not found`);
  }
}, Rr = async function(t, r, s) {
  if (o(this, Rt).length === 0)
    return;
  const a = {
    agent: o(this, N),
    agentOutput: t,
    context: o(this, P)
  }, u = (await Promise.all(o(this, Rt).map((p) => p.run(a)))).find((p) => p.output.tripwireTriggered);
  if (u) {
    if (o(this, Pt)[r])
      return;
    o(this, Pt)[r] = !0;
    const p = new vr(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`, u);
    this.emit("guardrail_tripped", o(this, P), o(this, N), p, {
      itemId: s
    }), this.interrupt();
    const d = ec(u);
    this.sendMessage(d);
    return;
  }
}, Wa = function() {
  o(this, $).on("*", (s) => {
    if (this.emit("transport_event", s), s.type === "conversation.item.input_audio_transcription.completed")
      try {
        const a = s;
        y(this, K, zs(o(this, K), a, o(this, Dt))), o(this, P).context.history = o(this, K), this.emit("history_updated", o(this, K));
      } catch (a) {
        this.emit("error", {
          type: "error",
          error: a
        });
      }
  }), o(this, $).on("mcp_tools_listed", ({ serverLabel: s, tools: a }) => {
    try {
      o(this, _n).set(s, a ?? []), F(this, W, Nr).call(this);
    } catch (i) {
      this.emit("error", { type: "error", error: i });
    }
  }), o(this, $).on("audio", (s) => {
    o(this, Se) || (y(this, Se, !0), this.emit("audio_start", o(this, P), o(this, N))), this.emit("audio", s);
  }), o(this, $).on("turn_started", () => {
    y(this, Se, !1), this.emit("agent_start", o(this, P), o(this, N)), o(this, N).emit("agent_start", o(this, P), o(this, N));
  }), o(this, $).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Ua(a) ?? "", u = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", o(this, P), o(this, N), i), o(this, N).emit("agent_end", o(this, P), i), F(this, W, Rr).call(this, i, s.response.id, u);
  }), o(this, $).on("audio_done", () => {
    o(this, Se) && y(this, Se, !1), this.emit("audio_stopped", o(this, P), o(this, N));
  });
  let t = 0, r;
  o(this, $).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, u = s.responseId;
      r !== i && (r = i, t = 0);
      const d = (o(this, gn)[i] ?? "") + a;
      if (o(this, gn)[i] = d, o(this, Nt).debounceTextLength < 0)
        return;
      const l = Math.floor(d.length / o(this, Nt).debounceTextLength);
      l > t && (t = l, F(this, W, Rr).call(this, d, u, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("item_update", (s) => {
    try {
      const a = !o(this, K).some((i) => i.itemId === s.itemId);
      if (y(this, K, zs(o(this, K), s, o(this, Dt))), o(this, P).context.history = o(this, K), a) {
        const i = o(this, K).find((u) => u.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", o(this, K));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("item_deleted", (s) => {
    try {
      y(this, K, o(this, K).filter((a) => a.itemId !== s.itemId)), o(this, P).context.history = o(this, K), this.emit("history_updated", o(this, K));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("function_call", async (s) => {
    try {
      await F(this, W, Va).call(this, s);
    } catch (a) {
      he.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("usage_update", (s) => {
    o(this, P).usage.add(s);
  }), o(this, $).on("audio_interrupted", () => {
    o(this, Se) && y(this, Se, !1), this.emit("audio_interrupted", o(this, P), o(this, N));
  }), o(this, $).on("error", (s) => {
    this.emit("error", s);
  }), o(this, $).on("mcp_tool_call_completed", (s) => {
    this.emit("mcp_tool_call_completed", o(this, P), o(this, N), s), o(this, vn) && o(this, $).sendEvent({
      type: "response.create"
    });
  }), o(this, $).on("mcp_approval_request", (s) => {
    this.emit("tool_approval_requested", o(this, P), o(this, N), {
      type: "mcp_approval_request",
      approvalItem: Yu(o(this, N), s)
    });
  });
}, /**
 * Recomputes the currently available MCP tools based on the current agent's active
 * MCP server configurations and the cached per-server tool listings. Emits
 * `mcp_tools_changed` if the set changed.
 */
Nr = function() {
  var p;
  const t = (p = o(this, Ot)) == null ? void 0 : p.filter((d) => d.type === "mcp"), r = (d) => {
    const l = d.allowed_tools;
    if (l) {
      if (Array.isArray(l))
        return l;
      if (l && Array.isArray(l.tool_names))
        return l.tool_names;
    }
  }, s = /* @__PURE__ */ new Map();
  for (const d of t) {
    const l = o(this, _n).get(d.server_label) ?? [], f = r(d);
    for (const h of l)
      f && !f.includes(h.name) || s.has(h.name) || s.set(h.name, h);
  }
  const a = Array.from(s.values()), i = o(this, at);
  (i.length !== a.length || JSON.stringify(i.map((d) => d.name).sort()) !== JSON.stringify(a.map((d) => d.name).sort())) && (y(this, at, a), this.emit("mcp_tools_changed", o(this, at)));
};
const md = {
  base64ToArrayBuffer: La,
  arrayBufferToBase64: Za,
  getLastTextFromAudioOutputMessage: Ua
};
export {
  rd as DEFAULT_OPENAI_REALTIME_MODEL,
  Ce as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  me as ModelBehaviorError,
  Bn as OpenAIRealtimeBase,
  sd as OpenAIRealtimeWebRTC,
  id as OpenAIRealtimeWebSocket,
  vr as OutputGuardrailTripwireTriggered,
  pd as RealtimeAgent,
  hd as RealtimeSession,
  Q as UserError,
  fd as backgroundResult,
  od as isBackgroundResult,
  wr as tool,
  md as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
